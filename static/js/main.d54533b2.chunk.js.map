{"version":3,"sources":["lib/apollo.ts","lib/theme.ts","pages/Home.tsx","lib/util.ts","pages/APIStats.tsx","pages/EditorWorks.tsx","lib/funNumbers.ts","pages/BigNum.tsx","pages/BigNumSetup.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["client","ApolloClient","link","ApolloLink","from","BatchHttpLink","uri","process","cache","InMemoryCache","theme","createMuiTheme","palette","primary","main","50","100","200","300","400","500","600","700","800","900","light","dark","secondary","error","red","A400","background","default","typography","fontFamily","useStyles","makeStyles","textDecoration","FunctionButton","to","title","description","classes","Grid","item","xs","sm","className","Card","CardActionArea","CardContent","Typography","variant","gutterBottom","Home","container","spacing","getThousandSep","num","toString","replace","STATS_QUERY","gql","StatItem","name","value","APIStats","useQuery","pollInterval","data","loading","align","component","CircularProgress","size","allArticles","totalCount","allRepliedArticles","articlesHasUsefulReplies","EditorWorks","FUN_NUMBERS","7","top","17","bottom","21","30","38","40","44","56","60","64","70","77","87","92","94","101","104","113","118","123","128","144","165","183","193","228","318","377","PanelType","PANELS_SETUP","replied","query","feedback","displays","position","right","left","display","resizer","flex","width","height","flexFlow","justifyContent","textAlign","margin","time","fontSize","fontWeight","number","lineHeight","funNumber","funParagraph","border","BigNumDisplay","rootProps","start","panelType","variables","startTime","toISOString","numberStr","toLocaleString","Resizer","children","useState","scale","setScale","resizerRef","useRef","useEffect","resize","current","getBoundingClientRect","horizontalScale","Math","max","verticalScale","min","window","addEventListener","removeEventListener","ref","style","transform","BigNum","search","useLocation","searchParams","URLSearchParams","get","panels","getAll","startDate","Date","map","key","props","setup","panelsetup","marginTop","marginBottom","BigNumSetup","history","useHistory","onSubmit","e","preventDefault","FormData","target","push","root","TextField","label","type","InputLabelProps","shrink","FormLabel","FormGroup","FormControlLabel","control","Checkbox","defaultChecked","CardActions","Button","color","titleLink","gridContainer","App","AppBar","Toolbar","Container","maxWidth","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d54533b2.chunk.js","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { BatchHttpLink } from 'apollo-link-batch-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    new BatchHttpLink({\n      uri: `${process.env.REACT_APP_API_URL}/graphql`,\n    }),\n  ]),\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport red from '@material-ui/core/colors/red';\n\n// Create a theme instance.\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#ffb600',\n      50: '#fff890',\n      100: '#fff000',\n      200: '#ffe200',\n      300: '#ffd300',\n      400: '#ffc500',\n      500: '#ffb600',\n      600: '#ffa300',\n      700: '#ff9200',\n      800: '#ff7f00',\n      900: '#ff6d00',\n      light: '#fafafa',\n      dark: '#e8e8e8',\n    },\n    secondary: {\n      main: '#333333',\n      50: '#f5f5f5',\n      100: '#d6d6d6',\n      200: '#adadad',\n      300: '#858585',\n      400: '#5c5c5c',\n      500: '#333333',\n      600: '#2e2e2e',\n      700: '#292929',\n      800: '#242424',\n      900: '#1f1f1f',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#f5f5f5',\n    },\n  },\n  typography: {\n    fontFamily: '\"Noto Sans TC\", \"Helvetica\", \"Arial\", sans-serif',\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport { Link, LinkProps } from 'react-router-dom';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst useStyles = makeStyles({\n  link: {\n    textDecoration: 'none',\n  },\n});\n\ntype FunctionButtonProps = {\n  to: LinkProps['to'];\n  title: string;\n  description: string;\n};\n\nconst FunctionButton: React.FC<FunctionButtonProps> = ({\n  to,\n  title,\n  description,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Grid item xs={12} sm={6}>\n      <Link className={classes.link} to={to}>\n        <Card>\n          <CardActionArea>\n            <CardContent>\n              <Typography variant=\"h5\" gutterBottom>\n                {title}\n              </Typography>\n              <Typography variant=\"body1\">{description}</Typography>\n            </CardContent>\n          </CardActionArea>\n        </Card>\n      </Link>\n    </Grid>\n  );\n};\n\nconst Home: React.FC = () => {\n  return (\n    <Grid container spacing={2}>\n      <FunctionButton\n        to=\"/stats\"\n        title=\"Statistics\"\n        description=\"Real-time statistics from Cofacts API\"\n      />\n      <FunctionButton\n        to=\"/editorworks\"\n        title=\"Thank you editors\"\n        description=\"List of recent works from editors\"\n      />\n      <FunctionButton\n        to=\"/bignum/setup\"\n        title=\"Big Numbers\"\n        description=\"Instant number display to project in meetups\"\n      />\n    </Grid>\n  );\n};\n\nexport default Home;\n","/**\n * Converts 1234 to \"1,234\"\n *\n * @param num The number to convert\n */\nexport function getThousandSep(num: number): string {\n  return num.toString().replace(/(\\d{1,3})(?=(\\d{3})+$)/, '$1,');\n}\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { getThousandSep } from '../lib/util';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst POLLING_INTERVAL = 5000;\n\nconst STATS_QUERY = gql`\n  query LOAD_API_STATS {\n    allArticles: ListArticles {\n      totalCount\n    }\n    allRepliedArticles: ListArticles(filter: { replyCount: { GTE: 1 } }) {\n      totalCount\n    }\n    articlesHasUsefulReplies: ListArticles(\n      filter: { hasArticleReplyWithMorePositiveFeedback: true }\n    ) {\n      totalCount\n    }\n  }\n`;\n\ntype StatItemProps = {\n  name: string;\n  value: string;\n};\n\nconst StatItem: React.FC<StatItemProps> = ({ name, value }) => {\n  return (\n    <Grid item xs={12} sm={4}>\n      <Card>\n        <CardContent>\n          <Typography variant=\"body1\" gutterBottom>\n            {name}\n          </Typography>\n          <Typography variant=\"h5\">{value}</Typography>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nconst APIStats: React.FC = () => {\n  const { data, loading } = useQuery(STATS_QUERY, {\n    pollInterval: POLLING_INTERVAL,\n  });\n\n  if (loading) {\n    return (\n      <Typography align=\"center\" component=\"div\">\n        <CircularProgress size={64} />\n      </Typography>\n    );\n  }\n\n  return (\n    <Grid container spacing={2}>\n      <StatItem\n        name=\"All messages\"\n        value={getThousandSep(+data?.allArticles?.totalCount)}\n      />\n      <StatItem\n        name=\"Replied messages\"\n        value={getThousandSep(+data?.allRepliedArticles?.totalCount)}\n      />\n      <StatItem\n        name=\"Has useful replies\"\n        value={getThousandSep(+data?.articlesHasUsefulReplies?.totalCount)}\n      />\n    </Grid>\n  );\n};\n\nexport default APIStats;\n","import React from 'react';\n\nconst EditorWorks: React.FC = () => {\n  return <div>Thanks editor</div>;\n};\n\nexport default EditorWorks;\n","type FunNumberSetup = {\n  top?: string;\n  bottom?: string;\n};\n\nconst FUN_NUMBERS: { [num: number]: FunNumberSetup } = {\n  7: {\n    top: 'Lucky',\n  },\n  17: {\n    bottom: '8+9',\n  },\n  21: {\n    top: '每天只有',\n    bottom: '小時，剩下 3 小時是用來睡覺的',\n  },\n  30: {\n    bottom: '而立',\n  },\n  38: {\n    bottom: '婦女節',\n  },\n  40: {\n    bottom: '不惑',\n  },\n  44: {\n    bottom: '隻石獅子',\n  },\n  50: {\n    bottom: '知天命',\n  },\n  56: {\n    bottom: '不能亡',\n  },\n  60: {\n    top: '在非洲每過了',\n    bottom: '秒，就有一分鐘過去',\n  },\n  64: {\n    top: '勿忘',\n  },\n  70: {\n    bottom: '隨心所欲而不踰矩',\n  },\n  77: {\n    top: '森',\n  },\n  87: {\n    bottom: '不能再高了',\n  },\n  92: {\n    top: '沒有共識的',\n    bottom: '共識',\n  },\n  94: {\n    bottom: '狂',\n  },\n  101: {\n    bottom: '大樓',\n  },\n  104: {\n    bottom: '查號台',\n  },\n  113: {\n    top: '衛福部',\n    bottom: '保護專線',\n  },\n  118: {\n    top: '看到',\n    bottom: '就跪了',\n  },\n  123: {\n    bottom: '木頭人',\n  },\n  128: {\n    top: '2的7次方',\n  },\n  144: {\n    top: '12×12=',\n  },\n  165: {\n    top: '警政署',\n    bottom: '反詐騙專線',\n  },\n  183: {\n    bottom: 'CLUB',\n  },\n  193: {\n    bottom: '縣道',\n  },\n  200: {\n    top: '意外撿到',\n    bottom: '元',\n  },\n  228: {\n    bottom: '二二八',\n  },\n  318: {\n    bottom: '學運',\n  },\n  377: {\n    bottom: '森七七',\n  },\n  500: {\n    top: '下去領',\n  },\n};\n\nexport default FUN_NUMBERS;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport FUN_NUMBERS from '../lib/funNumbers';\n\nconst MARGIN = 80;\nconst POLLING_INTERVAL = 5000;\n\nexport enum PanelType {\n  replied = 'replied',\n  feedback = 'feedback',\n}\n\n/**\n * Setup data for BigNum displays derived from <BigNumSetup>\n */\ntype Setup = {\n  /**\n   * Date to start counting\n   */\n  start: Date;\n\n  /**\n   * What panel(s) to display\n   */\n  panels: PanelType[];\n};\n\nconst PANELS_SETUP = {\n  [PanelType.replied]: {\n    top: '回覆了',\n    bottom: '則訊息',\n    query: gql`\n      query BigNumOfReplied($startTime: String) {\n        query: ListArticles(filter: { repliedAt: { GTE: $startTime } }) {\n          totalCount\n        }\n      }\n    `,\n  },\n  [PanelType.feedback]: {\n    top: '新增了',\n    bottom: '則評價',\n    query: gql`\n      query BigNumOfFeedbacks($startTime: String) {\n        query: ListArticleReplyFeedbacks(\n          filter: { createdAt: { GTE: $startTime } }\n        ) {\n          totalCount\n        }\n      }\n    `,\n  },\n} as const;\n\nconst DISPLAY_SIZE = 768;\n\nconst useStyles = makeStyles({\n  displays: {\n    position: 'fixed',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    display: 'flex',\n    background: '#fff',\n  },\n  resizer: {\n    flex: 1,\n    position: 'relative', // contains resized display & the border\n  },\n  display: {\n    position: 'absolute',\n    width: DISPLAY_SIZE,\n    height: DISPLAY_SIZE,\n    left: '50%',\n    top: '50%',\n    display: 'flex',\n    flexFlow: 'column',\n    justifyContent: 'space-around',\n    textAlign: 'center',\n    '& > p': {\n      margin: 0,\n    },\n  },\n  time: {\n    fontSize: 36,\n    fontWeight: 200,\n  },\n  top: {\n    fontSize: 64,\n    fontWeight: 600,\n  },\n  bottom: {\n    fontSize: 44,\n    fontWeight: 600,\n  },\n  number: {\n    fontSize: 360,\n    lineHeight: 1,\n    fontWeight: 400,\n  },\n  funNumber: {\n    fontSize: 360,\n    fontWeight: 100,\n  },\n  funParagraph: {\n    fontSize: 84,\n    fontWeight: 600,\n  },\n  border: {\n    position: 'absolute',\n    border: '8px solid rgba(0,0,0,0.64)',\n    top: 24,\n    right: 24,\n    bottom: 24,\n    left: 24,\n  },\n});\n\ntype BigNumDisplayProps = {\n  rootProps: JSX.IntrinsicElements['div'];\n  start: Setup['start'];\n  panelType: PanelType;\n};\n\nconst BigNumDisplay: React.FC<BigNumDisplayProps> = ({\n  rootProps,\n  start,\n  panelType,\n}) => {\n  const classes = useStyles();\n  const { top, bottom, query } = PANELS_SETUP[panelType];\n\n  const { data, loading, error } = useQuery(query, {\n    pollInterval: POLLING_INTERVAL,\n    variables: { startTime: start.toISOString() },\n  });\n\n  if (loading) {\n    return <div {...rootProps}>Loading</div>;\n  }\n\n  if (error) {\n    return <div {...rootProps}>{error.toString()}</div>;\n  }\n\n  const number = data.query?.totalCount as number | null;\n  const numberStr = number === null ? '' : number.toString();\n\n  if (number && number in FUN_NUMBERS) {\n    const { top, bottom } = FUN_NUMBERS[number];\n    return (\n      <>\n        <div {...rootProps}>\n          {top && <p className={classes.funParagraph}>{top}</p>}\n          <p className={classes.funNumber}>{numberStr}</p>\n          {bottom && <p className={classes.funParagraph}>{bottom}</p>}\n        </div>\n        <div className={classes.border} />\n      </>\n    );\n  }\n\n  return (\n    <div {...rootProps}>\n      <p className={classes.time}>自 {start.toLocaleString()} 起</p>\n      <p className={classes.top}>{top}</p>\n      <p className={classes.number}>{numberStr}</p>\n      <p className={classes.bottom}>{bottom}</p>\n    </div>\n  );\n};\n\ntype ResizerProp = {\n  children: (props: JSX.IntrinsicElements['div']) => JSX.Element;\n};\n\nconst Resizer: React.FC<ResizerProp> = ({ children }) => {\n  const classes = useStyles();\n  const [scale, setScale] = useState(1);\n  const resizerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    function resize() {\n      if (resizerRef.current === null) return;\n      const { width, height } = resizerRef.current.getBoundingClientRect();\n      const horizontalScale = Math.max(width - MARGIN, 0) / DISPLAY_SIZE;\n      const verticalScale = Math.max(height - MARGIN, 0) / DISPLAY_SIZE;\n\n      setScale(Math.min(horizontalScale, verticalScale));\n    }\n    window.addEventListener('resize', resize);\n    resize();\n\n    return () => {\n      window.removeEventListener('resize', resize);\n    };\n  }, []);\n\n  return (\n    <div className={classes.resizer} ref={resizerRef}>\n      {children({\n        className: classes.display,\n        style: { transform: `translate(-50%, -50%) scale(${scale})` },\n      })}\n    </div>\n  );\n};\n\nconst BigNum: React.FC = () => {\n  const { search } = useLocation();\n  const classes = useStyles();\n\n  const searchParams = new URLSearchParams(search);\n  const start = searchParams.get('start') as string; // Local time string, not UTC timestamp yet\n  const panels = searchParams.getAll('panels') as Setup['panels'];\n\n  const startDate = (start ? new Date(start) : new Date()) as Setup['start'];\n\n  return (\n    <div className={classes.displays}>\n      {panels.map((panelType) => (\n        <Resizer key={panelType}>\n          {(props) => (\n            <BigNumDisplay\n              rootProps={props}\n              panelType={panelType}\n              start={startDate}\n            />\n          )}\n        </Resizer>\n      ))}\n    </div>\n  );\n};\n\nexport default BigNum;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport { PanelType } from './BigNum';\n\nconst useStyles = makeStyles((theme) => ({\n  setup: {\n    margin: `${theme.spacing(2)}px auto`,\n  },\n  panelsetup: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nconst BigNumSetup: React.FC = () => {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const query = new URLSearchParams(\n      // FIXME: bug in URLSearchParams type (https://github.com/Microsoft/TypeScript/issues/30584)\n      // @ts-ignore\n      new FormData(e.target)\n    ).toString();\n\n    history.push('/bignum?' + query);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Card classes={{ root: classes.setup }}>\n        <CardContent>\n          <Typography variant=\"h4\" gutterBottom>\n            Display settings\n          </Typography>\n          <TextField\n            name=\"start\"\n            label=\"Time to start counting\"\n            type=\"datetime-local\"\n            InputLabelProps={{ shrink: true }}\n          />\n          <FormLabel component=\"legend\" classes={{ root: classes.panelsetup }}>\n            Numbers to show\n          </FormLabel>\n          <FormGroup>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"panels\"\n                  value={PanelType.replied}\n                  defaultChecked\n                />\n              }\n              label=\"Replied articles\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"panels\"\n                  value={PanelType.feedback}\n                  defaultChecked\n                />\n              }\n              label=\"Feedbacks\"\n            />\n          </FormGroup>\n        </CardContent>\n        <CardActions>\n          <Button color=\"primary\" type=\"submit\">\n            Start\n          </Button>\n        </CardActions>\n      </Card>\n    </form>\n  );\n};\n\nexport default BigNumSetup;\n","import React from 'react';\nimport { Route, Switch, Link } from 'react-router-dom';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport Home from './pages/Home';\nimport APIStats from './pages/APIStats';\nimport EditorWorks from './pages/EditorWorks';\nimport BigNumSetup from './pages/BigNumSetup';\nimport BigNum from './pages/BigNum';\n\nconst useStyles = makeStyles((theme) => ({\n  titleLink: {\n    color: 'inherit',\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  },\n  gridContainer: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <AppBar color=\"secondary\" position=\"static\">\n        <Toolbar>\n          <Link to=\"/\" className={classes.titleLink}>\n            <Typography variant=\"h6\">Cofacts Community Builder</Typography>\n          </Link>\n        </Toolbar>\n      </AppBar>\n      <Container classes={{ root: classes.gridContainer }} maxWidth=\"lg\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/stats\">\n            <APIStats />\n          </Route>\n          <Route path=\"/editorworks\">\n            <EditorWorks />\n          </Route>\n          <Route path=\"/bignum/setup\">\n            <BigNumSetup />\n          </Route>\n          <Route path=\"/bignum\">\n            <BigNum />\n          </Route>\n        </Switch>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { HashRouter as Router } from 'react-router-dom';\nimport client from './lib/apollo';\nimport theme from './lib/theme';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <ApolloProvider client={client}>\n        <Router>\n          <App />\n        </Router>\n      </ApolloProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}