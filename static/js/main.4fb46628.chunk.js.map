{"version":3,"sources":["types.tsx","lib/apollo.ts","lib/theme.ts","pages/Home.tsx","lib/util.ts","pages/NeedToCheck.tsx","pages/APIStats.tsx","pages/NeedToCheckSetup.tsx","pages/EditorWorks/util.ts","components/DataTable.tsx","pages/EditorWorks/ReplyTable.tsx","pages/EditorWorks/FeedbackTable.tsx","pages/EditorWorks/ReplyRequestTable.tsx","pages/EditorWorks/EditorWorks.tsx","pages/EditorWorks/index.tsx","lib/funNumbers.ts","pages/BigNum.tsx","pages/BigNumSetup.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ArticleReferenceTypeEnum","AvatarTypeEnum","ReplyTypeEnum","ArticleReplyStatusEnum","SortOrderEnum","ArticleReplyFeedbackStatusEnum","FeedbackVote","ArticleCategoryStatusEnum","ReplyRequestStatusEnum","AnalyticsDocTypeEnum","ArticleTypeEnum","AttachmentVariantEnum","SlugErrorEnum","client","ApolloClient","link","ApolloLink","from","BatchHttpLink","uri","process","headers","cache","InMemoryCache","typePolicies","Query","fields","ListReplies","relayStylePagination","ListReplyRequests","ListArticleReplyFeedbacks","theme","createMuiTheme","palette","primary","main","50","100","200","300","400","500","600","700","800","900","light","dark","secondary","error","red","A400","background","default","typography","fontFamily","useStyles","makeStyles","textDecoration","FunctionButton","to","title","description","classes","Grid","item","xs","sm","className","Card","CardActionArea","CardContent","Typography","variant","gutterBottom","Home","container","spacing","LoadApiStatsDocument","gql","FeedbackListStatInFeedbackTableDocument","FeedbackListInFeedbackTableDocument","ReplyRequestListStatInReplyRequestTableDocument","ReplyRequestListInReplyRequestTableDocument","ReplyListStatInReplyTableDocument","ReplyListInReplyTableDocument","getThousandSep","num","toString","replace","SortOrder","StatItem","name","value","APIStats","baseOptions","pollInterval","Apollo","data","loading","align","component","CircularProgress","size","allArticles","totalCount","allRepliedArticles","articlesHasUsefulReplies","NeedToCheckSetup","WorkType","NeedToCheck","search","useLocation","searchParams","URLSearchParams","get","DataTable","currentlyLoadedRows","onNewPageRequest","otherDataGridProps","useState","page","setPage","Math","floor","length","loadedPageIdx","setLoadedPageIdx","rows","slice","pagination","disableSelectionOnClick","pageSize","paginationMode","rowsPerPageOptions","onPageChange","hideFooterPagination","getSearchString","p","type","workType","day","userId","articleReplyUserId","showAll","TextCell","styled","width","overflow","display","whiteSpace","lineHeight","COLUMNS","field","headerName","renderCell","params","user","getValue","id","REPLY","text","replyId","Link","href","color","valueGetter","createdAt","Date","toLocaleString","ReplyTable","startDate","endDate","createdAtFilter","GTE","LTE","variables","statData","statLoading","statError","useReplyListInReplyTableQuery","notifyOnNetworkStatusChange","fetchMore","edges","map","node","columns","rowHeight","rowCount","after","cursor","isValidArticleCategory","ar","positiveFeedbackCount","negativeFeedbackCount","ARTICLE_REPLY_FEEDBACK","Upvote","Downvote","comment","article","reply","categories","articleCategories","filter","idx","category","Chip","key","label","style","margin","NORMAL_STATUSES","Normal","ALL_STATUSES","Blocked","statuses","useFeedbackListInFeedbackTableQuery","REPLY_REQUEST","reason","updatedAt","useReplyRequestListInReplyRequestTableQuery","controls","marginBottom","controlContent","alignItems","gap","EditorWorks","pathname","push","useHistory","undefined","useUrlParams","param","go","root","TextField","select","onChange","e","target","MenuItem","defaultValue","onBlur","Paper","height","FeedbackTable","ReplyRequestTable","FUN_NUMBERS","7","top","17","bottom","21","30","38","40","44","56","60","64","70","77","87","92","94","101","104","113","118","123","128","144","165","183","193","228","318","377","PanelType","PANELS_SETUP","replied","query","feedback","displays","position","right","left","resizer","flex","flexFlow","justifyContent","textAlign","time","fontSize","fontWeight","number","funNumber","funParagraph","border","BigNumDisplay","rootProps","start","panelType","useQuery","startTime","toISOString","numberStr","Resizer","children","scale","setScale","resizerRef","useRef","useEffect","resize","current","getBoundingClientRect","horizontalScale","max","verticalScale","min","window","addEventListener","removeEventListener","ref","transform","BigNum","startParam","panelsParms","getAll","panels","token","Object","values","includes","Error","props","setup","panelsetup","marginTop","BigNumSetup","history","onSubmit","preventDefault","FormData","InputLabelProps","shrink","FormLabel","FormGroup","FormControlLabel","control","Checkbox","defaultChecked","CardActions","Button","titleLink","gridContainer","App","AppBar","Toolbar","Container","maxWidth","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4fb46628.chunk.js","sourcesContent":["/* eslint-disable */\n/* AUTO-GENERATED. WILL BE OVERWRITTEN BY `npm run codegen`. */\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  readonly __typename?: 'Query';\n  readonly GetArticle?: Maybe<Article>;\n  readonly GetReply?: Maybe<Reply>;\n  /**\n   * Gets specified user. If id is not given, returns the currently logged-in user.\n   * Note that some fields like email is not visible to other users.\n   */\n  readonly GetUser?: Maybe<User>;\n  readonly GetCategory?: Maybe<Category>;\n  readonly ListArticles?: Maybe<ArticleConnection>;\n  readonly ListReplies?: Maybe<ReplyConnection>;\n  readonly ListCategories?: Maybe<ListCategoryConnection>;\n  readonly ListArticleReplyFeedbacks?: Maybe<ListArticleReplyFeedbackConnection>;\n  readonly ListReplyRequests?: Maybe<ListReplyRequestConnection>;\n  readonly ListBlockedUsers: UserConnection;\n  readonly ListAnalytics: AnalyticsConnection;\n  readonly ValidateSlug?: Maybe<ValidationResult>;\n};\n\n\nexport type QueryGetArticleArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryGetReplyArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryGetUserArgs = {\n  id?: Maybe<Scalars['String']>;\n  slug?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryGetCategoryArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryListArticlesArgs = {\n  filter?: Maybe<ListArticleFilter>;\n  orderBy?: Maybe<ReadonlyArray<Maybe<ListArticleOrderBy>>>;\n  first?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryListRepliesArgs = {\n  filter?: Maybe<ListReplyFilter>;\n  orderBy?: Maybe<ReadonlyArray<Maybe<ListReplyOrderBy>>>;\n  first?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryListCategoriesArgs = {\n  orderBy?: Maybe<ReadonlyArray<Maybe<ListCategoryOrderBy>>>;\n  first?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryListArticleReplyFeedbacksArgs = {\n  filter?: Maybe<ListArticleReplyFeedbackFilter>;\n  orderBy?: Maybe<ReadonlyArray<Maybe<ListArticleReplyFeedbackOrderBy>>>;\n  first?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryListReplyRequestsArgs = {\n  filter?: Maybe<ListReplyRequestFilter>;\n  orderBy?: Maybe<ReadonlyArray<Maybe<ListReplyRequestOrderBy>>>;\n  first?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryListBlockedUsersArgs = {\n  filter?: Maybe<ListBlockedUsersFilter>;\n  orderBy?: Maybe<ReadonlyArray<Maybe<ListBlockedUsersOrderBy>>>;\n  first?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryListAnalyticsArgs = {\n  filter?: Maybe<ListAnalyticsFilter>;\n  orderBy?: Maybe<ReadonlyArray<Maybe<ListAnalyticsOrderBy>>>;\n  first?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateSlugArgs = {\n  slug: Scalars['String'];\n};\n\nexport type Article = Node & {\n  readonly __typename?: 'Article';\n  readonly id: Scalars['ID'];\n  readonly text?: Maybe<Scalars['String']>;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly updatedAt?: Maybe<Scalars['String']>;\n  readonly references?: Maybe<ReadonlyArray<Maybe<ArticleReference>>>;\n  /** Number of normal article replies */\n  readonly replyCount?: Maybe<Scalars['Int']>;\n  /** Connections between this article and replies. Sorted by the logic described in https://github.com/cofacts/rumors-line-bot/issues/78. */\n  readonly articleReplies?: Maybe<ReadonlyArray<Maybe<ArticleReply>>>;\n  readonly articleCategories?: Maybe<ReadonlyArray<Maybe<ArticleCategory>>>;\n  /** Number of normal article categories */\n  readonly categoryCount?: Maybe<Scalars['Int']>;\n  readonly replyRequests?: Maybe<ReadonlyArray<Maybe<ReplyRequest>>>;\n  readonly replyRequestCount?: Maybe<Scalars['Int']>;\n  readonly lastRequestedAt?: Maybe<Scalars['String']>;\n  /** If the current user has requested for reply for this article. Null if not logged in. */\n  readonly requestedForReply?: Maybe<Scalars['Boolean']>;\n  /** The user submitted this article */\n  readonly user?: Maybe<User>;\n  readonly relatedArticles?: Maybe<ArticleConnection>;\n  /** Hyperlinks in article text */\n  readonly hyperlinks?: Maybe<ReadonlyArray<Maybe<Hyperlink>>>;\n  /** Activities analytics for the given article */\n  readonly stats?: Maybe<ReadonlyArray<Maybe<Analytics>>>;\n  /** Message event type */\n  readonly articleType: ArticleTypeEnum;\n  /** Attachment URL for this article. */\n  readonly attachmentUrl?: Maybe<Scalars['String']>;\n  /** Attachment hash to search or identify files */\n  readonly attachmentHash?: Maybe<Scalars['String']>;\n};\n\n\nexport type ArticleArticleRepliesArgs = {\n  status?: Maybe<ArticleReplyStatusEnum>;\n  statuses?: Maybe<ReadonlyArray<ArticleReplyStatusEnum>>;\n  appId?: Maybe<Scalars['String']>;\n  userId?: Maybe<Scalars['String']>;\n  selfOnly?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type ArticleArticleCategoriesArgs = {\n  status?: Maybe<ArticleCategoryStatusEnum>;\n  statuses?: Maybe<ReadonlyArray<ArticleCategoryStatusEnum>>;\n};\n\n\nexport type ArticleReplyRequestsArgs = {\n  statuses?: Maybe<ReadonlyArray<ReplyRequestStatusEnum>>;\n};\n\n\nexport type ArticleRelatedArticlesArgs = {\n  filter?: Maybe<RelatedArticleFilter>;\n  orderBy?: Maybe<ReadonlyArray<Maybe<RelatedArticleOrderBy>>>;\n  first?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n};\n\n\nexport type ArticleStatsArgs = {\n  dateRange?: Maybe<TimeRangeInput>;\n};\n\n\nexport type ArticleAttachmentUrlArgs = {\n  variant?: Maybe<AttachmentVariantEnum>;\n};\n\n/** Basic entity. Modeled after Relay's GraphQL Server Specification. */\nexport type Node = {\n  readonly id: Scalars['ID'];\n};\n\nexport type ArticleReference = {\n  readonly __typename?: 'ArticleReference';\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly type?: Maybe<ArticleReferenceTypeEnum>;\n  readonly permalink?: Maybe<Scalars['String']>;\n};\n\n/** Where this article is collected from. */\nexport enum ArticleReferenceTypeEnum {\n  /** The article is collected from the Internet, with a link to the article available. */\n  Url = 'URL',\n  /** The article is collected from conversations in LINE messengers. */\n  Line = 'LINE'\n}\n\n/** The linkage between an Article and a Reply */\nexport type ArticleReply = {\n  readonly __typename?: 'ArticleReply';\n  readonly replyId?: Maybe<Scalars['String']>;\n  readonly reply?: Maybe<Reply>;\n  /** Cached reply type value stored in ArticleReply */\n  readonly replyType?: Maybe<ReplyTypeEnum>;\n  readonly articleId?: Maybe<Scalars['String']>;\n  readonly article?: Maybe<Article>;\n  /** The user who conencted this reply and this article. */\n  readonly user?: Maybe<User>;\n  readonly userId: Scalars['String'];\n  readonly appId: Scalars['String'];\n  readonly canUpdateStatus?: Maybe<Scalars['Boolean']>;\n  readonly feedbackCount?: Maybe<Scalars['Int']>;\n  readonly positiveFeedbackCount?: Maybe<Scalars['Int']>;\n  readonly negativeFeedbackCount?: Maybe<Scalars['Int']>;\n  readonly feedbacks?: Maybe<ReadonlyArray<Maybe<ArticleReplyFeedback>>>;\n  /** The feedback of current user. null when not logged in or not voted yet. */\n  readonly ownVote?: Maybe<FeedbackVote>;\n  readonly status?: Maybe<ArticleReplyStatusEnum>;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly updatedAt?: Maybe<Scalars['String']>;\n};\n\n\n/** The linkage between an Article and a Reply */\nexport type ArticleReplyFeedbacksArgs = {\n  statuses?: Maybe<ReadonlyArray<ArticleReplyFeedbackStatusEnum>>;\n};\n\nexport type Reply = Node & {\n  readonly __typename?: 'Reply';\n  readonly id: Scalars['ID'];\n  /** The user submitted this reply version */\n  readonly user?: Maybe<User>;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly text?: Maybe<Scalars['String']>;\n  readonly type?: Maybe<ReplyTypeEnum>;\n  readonly reference?: Maybe<Scalars['String']>;\n  readonly articleReplies?: Maybe<ReadonlyArray<Maybe<ArticleReply>>>;\n  /** Hyperlinks in reply text or reference. May be empty array if no URLs are included. `null` when hyperlinks are still fetching. */\n  readonly hyperlinks?: Maybe<ReadonlyArray<Maybe<Hyperlink>>>;\n  /** Replies that has similar text or references of this current reply */\n  readonly similarReplies?: Maybe<ReplyConnection>;\n};\n\n\nexport type ReplyArticleRepliesArgs = {\n  status?: Maybe<ArticleReplyStatusEnum>;\n  statuses?: Maybe<ReadonlyArray<ArticleReplyStatusEnum>>;\n};\n\n\nexport type ReplySimilarRepliesArgs = {\n  orderBy?: Maybe<ReadonlyArray<Maybe<SimilarReplyOrderBy>>>;\n  first?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n};\n\nexport type User = Node & {\n  readonly __typename?: 'User';\n  readonly id: Scalars['ID'];\n  readonly slug?: Maybe<Scalars['String']>;\n  /** Returns only for current user. Returns `null` otherwise. */\n  readonly email?: Maybe<Scalars['String']>;\n  readonly name?: Maybe<Scalars['String']>;\n  readonly bio?: Maybe<Scalars['String']>;\n  /** returns avatar url from facebook, github or gravatar */\n  readonly avatarUrl?: Maybe<Scalars['String']>;\n  /** return avatar data as JSON string, currently only used when avatarType is OpenPeeps */\n  readonly avatarData?: Maybe<Scalars['String']>;\n  readonly avatarType?: Maybe<AvatarTypeEnum>;\n  /** Returns only for current user. Returns `null` otherwise. */\n  readonly availableAvatarTypes?: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;\n  readonly appId?: Maybe<Scalars['String']>;\n  /** Returns only for current user. Returns `null` otherwise. */\n  readonly appUserId?: Maybe<Scalars['String']>;\n  /** Returns only for current user. Returns `null` otherwise. */\n  readonly facebookId?: Maybe<Scalars['String']>;\n  /** Returns only for current user. Returns `null` otherwise. */\n  readonly githubId?: Maybe<Scalars['String']>;\n  /** Returns only for current user. Returns `null` otherwise. */\n  readonly twitterId?: Maybe<Scalars['String']>;\n  /** Number of articles this user has replied to */\n  readonly repliedArticleCount: Scalars['Int'];\n  /** Number of article replies this user has given feedbacks */\n  readonly votedArticleReplyCount: Scalars['Int'];\n  readonly level: Scalars['Int'];\n  readonly points: PointInfo;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly updatedAt?: Maybe<Scalars['String']>;\n  readonly lastActiveAt?: Maybe<Scalars['String']>;\n  /** List of contributions made by the user */\n  readonly contributions?: Maybe<ReadonlyArray<Maybe<Contribution>>>;\n  /** If not null, the user is blocked with the announcement in this string. */\n  readonly blockedReason?: Maybe<Scalars['String']>;\n};\n\n\nexport type UserContributionsArgs = {\n  dateRange?: Maybe<TimeRangeInput>;\n};\n\nexport enum AvatarTypeEnum {\n  OpenPeeps = 'OpenPeeps',\n  Gravatar = 'Gravatar',\n  Facebook = 'Facebook',\n  Github = 'Github'\n}\n\n/** Information of a user's point. Only available for current user. */\nexport type PointInfo = {\n  readonly __typename?: 'PointInfo';\n  /** Points earned by the current user */\n  readonly total: Scalars['Int'];\n  /** Points required for current level */\n  readonly currentLevel: Scalars['Int'];\n  /** Points required for next level. null when there is no next level. */\n  readonly nextLevel: Scalars['Int'];\n};\n\nexport type Contribution = {\n  readonly __typename?: 'Contribution';\n  readonly date?: Maybe<Scalars['String']>;\n  readonly count?: Maybe<Scalars['Int']>;\n};\n\n/** List only the entries that were created between the specific time range. The time range value is in elasticsearch date format (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html) */\nexport type TimeRangeInput = {\n  readonly LT?: Maybe<Scalars['String']>;\n  readonly LTE?: Maybe<Scalars['String']>;\n  readonly GT?: Maybe<Scalars['String']>;\n  readonly GTE?: Maybe<Scalars['String']>;\n  readonly EQ?: Maybe<Scalars['String']>;\n};\n\n/** Reflects how the replier categories the replied article. */\nexport enum ReplyTypeEnum {\n  /** The replier thinks that the article contains false information. */\n  Rumor = 'RUMOR',\n  /** The replier thinks that the articles contains no false information. */\n  NotRumor = 'NOT_RUMOR',\n  /** The replier thinks that the article is actually not a complete article on the internet or passed around in messengers. */\n  NotArticle = 'NOT_ARTICLE',\n  /** The replier thinks that the article contains personal viewpoint and is not objective. */\n  Opinionated = 'OPINIONATED'\n}\n\nexport enum ArticleReplyStatusEnum {\n  Normal = 'NORMAL',\n  Deleted = 'DELETED',\n  /** Created by a blocked user violating terms of use. */\n  Blocked = 'BLOCKED'\n}\n\n/** Data behind a hyperlink */\nexport type Hyperlink = {\n  readonly __typename?: 'Hyperlink';\n  /** URL in text */\n  readonly url?: Maybe<Scalars['String']>;\n  /** URL normalized by scrapUrl */\n  readonly normalizedUrl?: Maybe<Scalars['String']>;\n  readonly title?: Maybe<Scalars['String']>;\n  readonly summary?: Maybe<Scalars['String']>;\n  readonly topImageUrl?: Maybe<Scalars['String']>;\n  readonly fetchedAt?: Maybe<Scalars['String']>;\n  readonly status?: Maybe<Scalars['String']>;\n  readonly error?: Maybe<Scalars['String']>;\n};\n\nexport type ReplyConnection = Connection & {\n  readonly __typename?: 'ReplyConnection';\n  /** The total count of the entire collection, regardless of \"before\", \"after\". */\n  readonly totalCount: Scalars['Int'];\n  readonly edges: ReadonlyArray<ReplyConnectionEdge>;\n  readonly pageInfo: ReplyConnectionPageInfo;\n};\n\n/** Connection model for a list of nodes. Modeled after Relay's GraphQL Server Specification. */\nexport type Connection = {\n  readonly edges: ReadonlyArray<Edge>;\n  readonly totalCount: Scalars['Int'];\n  readonly pageInfo: PageInfo;\n};\n\n/** Edge in Connection. Modeled after GraphQL connection model. */\nexport type Edge = {\n  readonly node: Node;\n  readonly cursor: Scalars['String'];\n};\n\n/** PageInfo in Connection. Modeled after GraphQL connection model. */\nexport type PageInfo = {\n  /** The cursor pointing to the first node of the entire collection, regardless of \"before\" and \"after\". Can be used to determine if is in the last page. Null when the collection is empty. */\n  readonly firstCursor?: Maybe<Scalars['String']>;\n  /** The cursor pointing to the last node of the entire collection, regardless of \"before\" and \"after\". Can be used to determine if is in the last page. Null when the collection is empty. */\n  readonly lastCursor?: Maybe<Scalars['String']>;\n};\n\nexport type ReplyConnectionEdge = Edge & {\n  readonly __typename?: 'ReplyConnectionEdge';\n  readonly node: Reply;\n  readonly cursor: Scalars['String'];\n  readonly score?: Maybe<Scalars['Float']>;\n  readonly highlight?: Maybe<Highlights>;\n};\n\nexport type Highlights = {\n  readonly __typename?: 'Highlights';\n  /** Article or Reply text */\n  readonly text?: Maybe<Scalars['String']>;\n  /** Reply reference */\n  readonly reference?: Maybe<Scalars['String']>;\n  /** Article or Reply hyperlinks */\n  readonly hyperlinks?: Maybe<ReadonlyArray<Maybe<Hyperlink>>>;\n};\n\nexport type ReplyConnectionPageInfo = PageInfo & {\n  readonly __typename?: 'ReplyConnectionPageInfo';\n  readonly lastCursor?: Maybe<Scalars['String']>;\n  readonly firstCursor?: Maybe<Scalars['String']>;\n};\n\n/** An entry of orderBy argument. Specifies field name and the sort order. Only one field name is allowd per entry. */\nexport type SimilarReplyOrderBy = {\n  readonly _score?: Maybe<SortOrderEnum>;\n  readonly createdAt?: Maybe<SortOrderEnum>;\n};\n\nexport enum SortOrderEnum {\n  Asc = 'ASC',\n  Desc = 'DESC'\n}\n\n/** User feedback to an ArticleReply */\nexport type ArticleReplyFeedback = Node & {\n  readonly __typename?: 'ArticleReplyFeedback';\n  readonly id: Scalars['ID'];\n  readonly user?: Maybe<User>;\n  readonly userId?: Maybe<Scalars['String']>;\n  readonly appId?: Maybe<Scalars['String']>;\n  /** User ID of the reply's author */\n  readonly replyUserId: Scalars['String'];\n  /** User ID of the article-reply's author */\n  readonly articleReplyUserId: Scalars['String'];\n  readonly comment?: Maybe<Scalars['String']>;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly updatedAt?: Maybe<Scalars['String']>;\n  readonly status: ArticleReplyFeedbackStatusEnum;\n  /** User's vote on the articleReply */\n  readonly vote?: Maybe<FeedbackVote>;\n  /**\n   * One of 1, 0 and -1. Representing upvote, neutral and downvote, respectively\n   * @deprecated Use vote instead\n   */\n  readonly score?: Maybe<Scalars['Int']>;\n  /** The scored article-reply's article */\n  readonly article?: Maybe<Article>;\n  /** The scored article-reply's reply */\n  readonly reply?: Maybe<Reply>;\n  /** The scored article-reply */\n  readonly articleReply?: Maybe<ArticleReply>;\n};\n\nexport enum ArticleReplyFeedbackStatusEnum {\n  Normal = 'NORMAL',\n  /** Created by a blocked user violating terms of use. */\n  Blocked = 'BLOCKED'\n}\n\nexport enum FeedbackVote {\n  Upvote = 'UPVOTE',\n  Neutral = 'NEUTRAL',\n  Downvote = 'DOWNVOTE'\n}\n\n/** The linkage between an Article and a Category */\nexport type ArticleCategory = Node & {\n  readonly __typename?: 'ArticleCategory';\n  readonly id: Scalars['ID'];\n  readonly categoryId?: Maybe<Scalars['String']>;\n  readonly category?: Maybe<Category>;\n  readonly articleId?: Maybe<Scalars['String']>;\n  readonly article?: Maybe<Article>;\n  /** The user who updated this category with this article. */\n  readonly user?: Maybe<User>;\n  readonly userId: Scalars['String'];\n  readonly appId: Scalars['String'];\n  readonly canUpdateStatus?: Maybe<Scalars['Boolean']>;\n  readonly feedbackCount?: Maybe<Scalars['Int']>;\n  readonly positiveFeedbackCount?: Maybe<Scalars['Int']>;\n  readonly negativeFeedbackCount?: Maybe<Scalars['Int']>;\n  readonly feedbacks?: Maybe<ReadonlyArray<Maybe<ArticleCategoryFeedback>>>;\n  /** The feedback of current user. null when not logged in or not voted yet. */\n  readonly ownVote?: Maybe<FeedbackVote>;\n  readonly status?: Maybe<ArticleCategoryStatusEnum>;\n  readonly aiModel?: Maybe<Scalars['String']>;\n  readonly aiConfidence?: Maybe<Scalars['Float']>;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly updatedAt?: Maybe<Scalars['String']>;\n};\n\n/** Category label for specific topic */\nexport type Category = Node & {\n  readonly __typename?: 'Category';\n  readonly id: Scalars['ID'];\n  readonly title?: Maybe<Scalars['String']>;\n  readonly description?: Maybe<Scalars['String']>;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly updatedAt?: Maybe<Scalars['String']>;\n  readonly articleCategories?: Maybe<ArticleCategoryConnection>;\n};\n\n\n/** Category label for specific topic */\nexport type CategoryArticleCategoriesArgs = {\n  status?: Maybe<ArticleCategoryStatusEnum>;\n  orderBy?: Maybe<ReadonlyArray<Maybe<CategoryArticleCategoriesOrderBy>>>;\n  first?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n};\n\nexport type ArticleCategoryConnection = Connection & {\n  readonly __typename?: 'ArticleCategoryConnection';\n  /** The total count of the entire collection, regardless of \"before\", \"after\". */\n  readonly totalCount: Scalars['Int'];\n  readonly edges: ReadonlyArray<ArticleCategoryConnectionEdge>;\n  readonly pageInfo: ArticleCategoryConnectionPageInfo;\n};\n\nexport type ArticleCategoryConnectionEdge = Edge & {\n  readonly __typename?: 'ArticleCategoryConnectionEdge';\n  readonly node: ArticleCategory;\n  readonly cursor: Scalars['String'];\n  readonly score?: Maybe<Scalars['Float']>;\n  readonly highlight?: Maybe<Highlights>;\n};\n\nexport type ArticleCategoryConnectionPageInfo = PageInfo & {\n  readonly __typename?: 'ArticleCategoryConnectionPageInfo';\n  readonly lastCursor?: Maybe<Scalars['String']>;\n  readonly firstCursor?: Maybe<Scalars['String']>;\n};\n\nexport enum ArticleCategoryStatusEnum {\n  Normal = 'NORMAL',\n  Deleted = 'DELETED',\n  /** Created by a blocked user violating terms of use. */\n  Blocked = 'BLOCKED'\n}\n\n/** An entry of orderBy argument. Specifies field name and the sort order. Only one field name is allowd per entry. */\nexport type CategoryArticleCategoriesOrderBy = {\n  readonly createdAt?: Maybe<SortOrderEnum>;\n};\n\n/** User feedback to an ArticleCategory */\nexport type ArticleCategoryFeedback = {\n  readonly __typename?: 'ArticleCategoryFeedback';\n  readonly id?: Maybe<Scalars['String']>;\n  readonly user?: Maybe<User>;\n  readonly comment?: Maybe<Scalars['String']>;\n  /** User's vote on the articleCategory */\n  readonly vote?: Maybe<FeedbackVote>;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly updatedAt?: Maybe<Scalars['String']>;\n};\n\nexport type ReplyRequest = Node & {\n  readonly __typename?: 'ReplyRequest';\n  readonly id: Scalars['ID'];\n  readonly articleId: Scalars['ID'];\n  readonly userId?: Maybe<Scalars['String']>;\n  readonly appId?: Maybe<Scalars['String']>;\n  /** The author of reply request. */\n  readonly user?: Maybe<User>;\n  readonly reason?: Maybe<Scalars['String']>;\n  readonly feedbackCount?: Maybe<Scalars['Int']>;\n  readonly positiveFeedbackCount?: Maybe<Scalars['Int']>;\n  readonly negativeFeedbackCount?: Maybe<Scalars['Int']>;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly updatedAt?: Maybe<Scalars['String']>;\n  /** The feedback of current user. null when not logged in or not voted yet. */\n  readonly ownVote?: Maybe<FeedbackVote>;\n  readonly article: Article;\n  readonly status: ReplyRequestStatusEnum;\n};\n\nexport enum ReplyRequestStatusEnum {\n  Normal = 'NORMAL',\n  /** Created by a blocked user violating terms of use. */\n  Blocked = 'BLOCKED'\n}\n\nexport type ArticleConnection = Connection & {\n  readonly __typename?: 'ArticleConnection';\n  /** The total count of the entire collection, regardless of \"before\", \"after\". */\n  readonly totalCount: Scalars['Int'];\n  readonly edges: ReadonlyArray<ArticleConnectionEdge>;\n  readonly pageInfo: ArticleConnectionPageInfo;\n};\n\nexport type ArticleConnectionEdge = Edge & {\n  readonly __typename?: 'ArticleConnectionEdge';\n  readonly node: Article;\n  readonly cursor: Scalars['String'];\n  readonly score?: Maybe<Scalars['Float']>;\n  readonly highlight?: Maybe<Highlights>;\n};\n\nexport type ArticleConnectionPageInfo = PageInfo & {\n  readonly __typename?: 'ArticleConnectionPageInfo';\n  readonly lastCursor?: Maybe<Scalars['String']>;\n  readonly firstCursor?: Maybe<Scalars['String']>;\n};\n\nexport type RelatedArticleFilter = {\n  readonly replyCount?: Maybe<RangeInput>;\n};\n\n/** List only the entries whose field match the criteria. */\nexport type RangeInput = {\n  readonly LT?: Maybe<Scalars['Int']>;\n  readonly LTE?: Maybe<Scalars['Int']>;\n  readonly GT?: Maybe<Scalars['Int']>;\n  readonly GTE?: Maybe<Scalars['Int']>;\n  readonly EQ?: Maybe<Scalars['Int']>;\n};\n\n/** An entry of orderBy argument. Specifies field name and the sort order. Only one field name is allowd per entry. */\nexport type RelatedArticleOrderBy = {\n  readonly _score?: Maybe<SortOrderEnum>;\n  readonly updatedAt?: Maybe<SortOrderEnum>;\n};\n\nexport type Analytics = Node & {\n  readonly __typename?: 'Analytics';\n  readonly id: Scalars['ID'];\n  /** The id for the document that this analytic datapoint is for. */\n  readonly docId: Scalars['ID'];\n  /** Type of document that this analytic datapoint is for. */\n  readonly type: AnalyticsDocTypeEnum;\n  /** The day this analytic datapoint is represented, in YYYY-MM-DD format */\n  readonly date: Scalars['String'];\n  readonly lineUser?: Maybe<Scalars['Int']>;\n  readonly lineVisit?: Maybe<Scalars['Int']>;\n  readonly webUser?: Maybe<Scalars['Int']>;\n  readonly webVisit?: Maybe<Scalars['Int']>;\n  /** Sum of LIFF visitor count from all sources */\n  readonly liffUser: Scalars['Int'];\n  /** Sum of LIFF view count from all sources */\n  readonly liffVisit: Scalars['Int'];\n  readonly liff: ReadonlyArray<AnalyticsLiffEntry>;\n  /** Author of the document that this analytic datapoint measures. */\n  readonly docUserId?: Maybe<Scalars['ID']>;\n  /** Authoring app ID of the document that this analytic datapoint measures. */\n  readonly docAppId?: Maybe<Scalars['ID']>;\n};\n\nexport enum AnalyticsDocTypeEnum {\n  Article = 'ARTICLE',\n  Reply = 'REPLY'\n}\n\nexport type AnalyticsLiffEntry = {\n  readonly __typename?: 'AnalyticsLiffEntry';\n  /** utm_source for this LIFF stat entry. Empty string if not set. */\n  readonly source: Scalars['String'];\n  readonly user: Scalars['Int'];\n  readonly visit: Scalars['Int'];\n};\n\nexport enum ArticleTypeEnum {\n  Text = 'TEXT',\n  Image = 'IMAGE',\n  Video = 'VIDEO',\n  Audio = 'AUDIO'\n}\n\nexport enum AttachmentVariantEnum {\n  /** The original file. Only available to logged-in users. */\n  Original = 'ORIGINAL',\n  /** Downsized file. Fixed-width webp for images; other type TBD. */\n  Preview = 'PREVIEW',\n  /** Tiny, static image representing the attachment. Fixed-height jpeg for images; other types TBD. */\n  Thumbnail = 'THUMBNAIL'\n}\n\nexport type ListArticleFilter = {\n  /** Show only articles created by a specific app. */\n  readonly appId?: Maybe<Scalars['String']>;\n  /** Show only articles created by the specific user. */\n  readonly userId?: Maybe<Scalars['String']>;\n  /** List only the articles that were created between the specific time range. */\n  readonly createdAt?: Maybe<TimeRangeInput>;\n  /** If given, only list out articles with specific IDs */\n  readonly ids?: Maybe<ReadonlyArray<Scalars['ID']>>;\n  /** Only list the articles created by the currently logged in user */\n  readonly selfOnly?: Maybe<Scalars['Boolean']>;\n  /** List only the articles whose number of replies matches the criteria. */\n  readonly replyCount?: Maybe<RangeInput>;\n  /** List only the articles whose number of categories match the criteria. */\n  readonly categoryCount?: Maybe<RangeInput>;\n  /** List only articles that match any of the specified categories.ArticleCategories that are deleted or has more negative feedbacks than positive ones are not taken into account. */\n  readonly categoryIds?: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;\n  /** List all articles related to a given string. */\n  readonly moreLikeThis?: Maybe<MoreLikeThisInput>;\n  /** List only the articles whose number of replies matches the criteria. */\n  readonly replyRequestCount?: Maybe<RangeInput>;\n  /** [Deprecated] use articleReply filter instead. List only the articles that were replied between the specific time range. */\n  readonly repliedAt?: Maybe<TimeRangeInput>;\n  /** Specify an articleId here to show only articles from the sender of that specified article. */\n  readonly fromUserOfArticleId?: Maybe<Scalars['String']>;\n  /** Show only articles with(out) article replies created by specified user */\n  readonly articleRepliesFrom?: Maybe<UserAndExistInput>;\n  /**\n   * When true, return only articles with any article replies that has more positive feedback than negative.\n   * When false, return articles with none of its article replies that has more positive feedback, including those with no replies yet.\n   * In both scenario, deleted article replies are not taken into account.\n   */\n  readonly hasArticleReplyWithMorePositiveFeedback?: Maybe<Scalars['Boolean']>;\n  /** [Deprecated] use articleReply filter instead. List the articles with replies of certain types */\n  readonly replyTypes?: Maybe<ReadonlyArray<Maybe<ReplyTypeEnum>>>;\n  /** List the articles with certain types */\n  readonly articleTypes?: Maybe<ReadonlyArray<Maybe<ArticleTypeEnum>>>;\n  /** Show the media article similar to the input url */\n  readonly mediaUrl?: Maybe<Scalars['String']>;\n  /** Show articles with article replies matching this criteria */\n  readonly articleReply?: Maybe<ArticleReplyFilterInput>;\n};\n\n/**\n * Parameters for Elasticsearch more_like_this query.\n * See: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html\n */\nexport type MoreLikeThisInput = {\n  /** The text string to search for. */\n  readonly like?: Maybe<Scalars['String']>;\n  /**\n   * more_like_this query's \"minimum_should_match\" query param.\n   * See https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-minimum-should-match.html for possible values.\n   */\n  readonly minimumShouldMatch?: Maybe<Scalars['String']>;\n};\n\nexport type UserAndExistInput = {\n  readonly userId: Scalars['String'];\n  /**\n   * When true (or not specified), return only entries with the specified user's involvement.\n   * When false, return only entries that the specified user did not involve.\n   */\n  readonly exists?: Maybe<Scalars['Boolean']>;\n};\n\nexport type ArticleReplyFilterInput = {\n  /** Show only articleReplies created by a specific app. */\n  readonly appId?: Maybe<Scalars['String']>;\n  /** Show only articleReplies created by the specific user. */\n  readonly userId?: Maybe<Scalars['String']>;\n  /** List only the articleReplies that were created between the specific time range. */\n  readonly createdAt?: Maybe<TimeRangeInput>;\n  /** Only list the articleReplies created by the currently logged in user */\n  readonly selfOnly?: Maybe<Scalars['Boolean']>;\n  readonly statuses?: Maybe<ReadonlyArray<ArticleReplyStatusEnum>>;\n  readonly replyTypes?: Maybe<ReadonlyArray<Maybe<ReplyTypeEnum>>>;\n};\n\n/** An entry of orderBy argument. Specifies field name and the sort order. Only one field name is allowd per entry. */\nexport type ListArticleOrderBy = {\n  readonly _score?: Maybe<SortOrderEnum>;\n  readonly updatedAt?: Maybe<SortOrderEnum>;\n  readonly createdAt?: Maybe<SortOrderEnum>;\n  readonly replyRequestCount?: Maybe<SortOrderEnum>;\n  readonly replyCount?: Maybe<SortOrderEnum>;\n  readonly lastRequestedAt?: Maybe<SortOrderEnum>;\n  readonly lastRepliedAt?: Maybe<SortOrderEnum>;\n  readonly lastMatchingArticleReplyCreatedAt?: Maybe<SortOrderEnum>;\n};\n\nexport type ListReplyFilter = {\n  /** Show only replies created by a specific app. */\n  readonly appId?: Maybe<Scalars['String']>;\n  /** Show only replies created by the specific user. */\n  readonly userId?: Maybe<Scalars['String']>;\n  /** List only the replies that were created between the specific time range. */\n  readonly createdAt?: Maybe<TimeRangeInput>;\n  /** If given, only list out replies with specific IDs */\n  readonly ids?: Maybe<ReadonlyArray<Scalars['ID']>>;\n  /** Only list the replies created by the currently logged in user */\n  readonly selfOnly?: Maybe<Scalars['Boolean']>;\n  readonly moreLikeThis?: Maybe<MoreLikeThisInput>;\n  /** [Deprecated] use types instead. */\n  readonly type?: Maybe<ReplyTypeEnum>;\n  /** List the replies of certain types */\n  readonly types?: Maybe<ReadonlyArray<Maybe<ReplyTypeEnum>>>;\n};\n\n/** An entry of orderBy argument. Specifies field name and the sort order. Only one field name is allowd per entry. */\nexport type ListReplyOrderBy = {\n  readonly _score?: Maybe<SortOrderEnum>;\n  readonly createdAt?: Maybe<SortOrderEnum>;\n};\n\nexport type ListCategoryConnection = Connection & {\n  readonly __typename?: 'ListCategoryConnection';\n  /** The total count of the entire collection, regardless of \"before\", \"after\". */\n  readonly totalCount: Scalars['Int'];\n  readonly edges: ReadonlyArray<ListCategoryConnectionEdge>;\n  readonly pageInfo: ListCategoryConnectionPageInfo;\n};\n\nexport type ListCategoryConnectionEdge = Edge & {\n  readonly __typename?: 'ListCategoryConnectionEdge';\n  readonly node: Category;\n  readonly cursor: Scalars['String'];\n  readonly score?: Maybe<Scalars['Float']>;\n  readonly highlight?: Maybe<Highlights>;\n};\n\nexport type ListCategoryConnectionPageInfo = PageInfo & {\n  readonly __typename?: 'ListCategoryConnectionPageInfo';\n  readonly lastCursor?: Maybe<Scalars['String']>;\n  readonly firstCursor?: Maybe<Scalars['String']>;\n};\n\n/** An entry of orderBy argument. Specifies field name and the sort order. Only one field name is allowd per entry. */\nexport type ListCategoryOrderBy = {\n  readonly createdAt?: Maybe<SortOrderEnum>;\n};\n\nexport type ListArticleReplyFeedbackConnection = Connection & {\n  readonly __typename?: 'ListArticleReplyFeedbackConnection';\n  /** The total count of the entire collection, regardless of \"before\", \"after\". */\n  readonly totalCount: Scalars['Int'];\n  readonly edges: ReadonlyArray<ListArticleReplyFeedbackConnectionEdge>;\n  readonly pageInfo: ListArticleReplyFeedbackConnectionPageInfo;\n};\n\nexport type ListArticleReplyFeedbackConnectionEdge = Edge & {\n  readonly __typename?: 'ListArticleReplyFeedbackConnectionEdge';\n  readonly node: ArticleReplyFeedback;\n  readonly cursor: Scalars['String'];\n  readonly score?: Maybe<Scalars['Float']>;\n  readonly highlight?: Maybe<Highlights>;\n};\n\nexport type ListArticleReplyFeedbackConnectionPageInfo = PageInfo & {\n  readonly __typename?: 'ListArticleReplyFeedbackConnectionPageInfo';\n  readonly lastCursor?: Maybe<Scalars['String']>;\n  readonly firstCursor?: Maybe<Scalars['String']>;\n};\n\nexport type ListArticleReplyFeedbackFilter = {\n  /** Show only article reply feedbacks created by a specific app. */\n  readonly appId?: Maybe<Scalars['String']>;\n  /** Show only article reply feedbacks created by the specific user. */\n  readonly userId?: Maybe<Scalars['String']>;\n  /** List only the article reply feedbacks that were created between the specific time range. */\n  readonly createdAt?: Maybe<TimeRangeInput>;\n  /** If given, only list out article reply feedbacks with specific IDs */\n  readonly ids?: Maybe<ReadonlyArray<Scalars['ID']>>;\n  /** Only list the article reply feedbacks created by the currently logged in user */\n  readonly selfOnly?: Maybe<Scalars['Boolean']>;\n  readonly articleId?: Maybe<Scalars['String']>;\n  readonly replyId?: Maybe<Scalars['String']>;\n  /** Search for comment field using more_like_this query */\n  readonly moreLikeThis?: Maybe<MoreLikeThisInput>;\n  /** When specified, list only article reply feedbacks with specified vote */\n  readonly vote?: Maybe<ReadonlyArray<Maybe<FeedbackVote>>>;\n  /** List only the article reply feedbacks that were last updated within the specific time range. */\n  readonly updatedAt?: Maybe<TimeRangeInput>;\n  /** List only the article reply feedbacks with the selected statuses */\n  readonly statuses?: Maybe<ReadonlyArray<ArticleReplyFeedbackStatusEnum>>;\n  /** List only the feedbacks to the replies created by this user ID */\n  readonly replyUserId?: Maybe<Scalars['String']>;\n  /** List only the feedbacks to the article-replies created by this user ID */\n  readonly articleReplyUserId?: Maybe<Scalars['String']>;\n  /** List only the feedbacks whose `replyUserId` *or* `articleReplyUserId` is this user ID */\n  readonly authorId?: Maybe<Scalars['String']>;\n};\n\n/** An entry of orderBy argument. Specifies field name and the sort order. Only one field name is allowd per entry. */\nexport type ListArticleReplyFeedbackOrderBy = {\n  readonly createdAt?: Maybe<SortOrderEnum>;\n  readonly updatedAt?: Maybe<SortOrderEnum>;\n  readonly vote?: Maybe<SortOrderEnum>;\n  /** Full text relevance for comment field queries */\n  readonly _score?: Maybe<SortOrderEnum>;\n};\n\nexport type ListReplyRequestConnection = Connection & {\n  readonly __typename?: 'ListReplyRequestConnection';\n  /** The total count of the entire collection, regardless of \"before\", \"after\". */\n  readonly totalCount: Scalars['Int'];\n  readonly edges: ReadonlyArray<ListReplyRequestConnectionEdge>;\n  readonly pageInfo: ListReplyRequestConnectionPageInfo;\n};\n\nexport type ListReplyRequestConnectionEdge = Edge & {\n  readonly __typename?: 'ListReplyRequestConnectionEdge';\n  readonly node: ReplyRequest;\n  readonly cursor: Scalars['String'];\n  readonly score?: Maybe<Scalars['Float']>;\n  readonly highlight?: Maybe<Highlights>;\n};\n\nexport type ListReplyRequestConnectionPageInfo = PageInfo & {\n  readonly __typename?: 'ListReplyRequestConnectionPageInfo';\n  readonly lastCursor?: Maybe<Scalars['String']>;\n  readonly firstCursor?: Maybe<Scalars['String']>;\n};\n\nexport type ListReplyRequestFilter = {\n  /** Show only reply requests created by a specific app. */\n  readonly appId?: Maybe<Scalars['String']>;\n  /** Show only reply requests created by the specific user. */\n  readonly userId?: Maybe<Scalars['String']>;\n  /** List only the reply requests that were created between the specific time range. */\n  readonly createdAt?: Maybe<TimeRangeInput>;\n  /** If given, only list out reply requests with specific IDs */\n  readonly ids?: Maybe<ReadonlyArray<Scalars['ID']>>;\n  /** Only list the reply requests created by the currently logged in user */\n  readonly selfOnly?: Maybe<Scalars['Boolean']>;\n  readonly articleId?: Maybe<Scalars['String']>;\n  /** List only reply requests with specified statuses */\n  readonly statuses?: Maybe<ReadonlyArray<ReplyRequestStatusEnum>>;\n};\n\n/** An entry of orderBy argument. Specifies field name and the sort order. Only one field name is allowd per entry. */\nexport type ListReplyRequestOrderBy = {\n  readonly createdAt?: Maybe<SortOrderEnum>;\n  readonly vote?: Maybe<SortOrderEnum>;\n};\n\nexport type UserConnection = Connection & {\n  readonly __typename?: 'UserConnection';\n  /** The total count of the entire collection, regardless of \"before\", \"after\". */\n  readonly totalCount: Scalars['Int'];\n  readonly edges: ReadonlyArray<UserConnectionEdge>;\n  readonly pageInfo: UserConnectionPageInfo;\n};\n\nexport type UserConnectionEdge = Edge & {\n  readonly __typename?: 'UserConnectionEdge';\n  readonly node: User;\n  readonly cursor: Scalars['String'];\n  readonly score?: Maybe<Scalars['Float']>;\n  readonly highlight?: Maybe<Highlights>;\n};\n\nexport type UserConnectionPageInfo = PageInfo & {\n  readonly __typename?: 'UserConnectionPageInfo';\n  readonly lastCursor?: Maybe<Scalars['String']>;\n  readonly firstCursor?: Maybe<Scalars['String']>;\n};\n\nexport type ListBlockedUsersFilter = {\n  /** List only the blocked users that were registered between the specific time range. */\n  readonly createdAt?: Maybe<TimeRangeInput>;\n};\n\n/** An entry of orderBy argument. Specifies field name and the sort order. Only one field name is allowd per entry. */\nexport type ListBlockedUsersOrderBy = {\n  readonly createdAt?: Maybe<SortOrderEnum>;\n};\n\nexport type AnalyticsConnection = Connection & {\n  readonly __typename?: 'AnalyticsConnection';\n  /** The total count of the entire collection, regardless of \"before\", \"after\". */\n  readonly totalCount: Scalars['Int'];\n  readonly edges: ReadonlyArray<AnalyticsConnectionEdge>;\n  readonly pageInfo: AnalyticsConnectionPageInfo;\n};\n\nexport type AnalyticsConnectionEdge = Edge & {\n  readonly __typename?: 'AnalyticsConnectionEdge';\n  readonly node: Analytics;\n  readonly cursor: Scalars['String'];\n  readonly score?: Maybe<Scalars['Float']>;\n  readonly highlight?: Maybe<Highlights>;\n};\n\nexport type AnalyticsConnectionPageInfo = PageInfo & {\n  readonly __typename?: 'AnalyticsConnectionPageInfo';\n  readonly lastCursor?: Maybe<Scalars['String']>;\n  readonly firstCursor?: Maybe<Scalars['String']>;\n};\n\nexport type ListAnalyticsFilter = {\n  /** List only the activities between the specific time range. */\n  readonly date?: Maybe<TimeRangeInput>;\n  readonly type?: Maybe<AnalyticsDocTypeEnum>;\n  readonly docId?: Maybe<Scalars['ID']>;\n  readonly docUserId?: Maybe<Scalars['ID']>;\n  readonly docAppId?: Maybe<Scalars['ID']>;\n};\n\n/** An entry of orderBy argument. Specifies field name and the sort order. Only one field name is allowd per entry. */\nexport type ListAnalyticsOrderBy = {\n  readonly date?: Maybe<SortOrderEnum>;\n};\n\nexport type ValidationResult = {\n  readonly __typename?: 'ValidationResult';\n  readonly success: Scalars['Boolean'];\n  readonly error?: Maybe<SlugErrorEnum>;\n};\n\n/** Slug of canot */\nexport enum SlugErrorEnum {\n  /** Slug is empty */\n  Empty = 'EMPTY',\n  /** Slug have leading or trailing spaces or line ends */\n  NotTrimmed = 'NOT_TRIMMED',\n  /** Slug has URI component inside, which can be misleading to browsers */\n  HasUriComponent = 'HAS_URI_COMPONENT',\n  /** Slug has already been taken by someone else */\n  Taken = 'TAKEN'\n}\n\nexport type Mutation = {\n  readonly __typename?: 'Mutation';\n  /** Create an article and/or a replyRequest */\n  readonly CreateArticle?: Maybe<MutationResult>;\n  /** Create a media article and/or a replyRequest */\n  readonly CreateMediaArticle?: Maybe<MutationResult>;\n  /** Create a reply that replies to the specified article. */\n  readonly CreateReply?: Maybe<MutationResult>;\n  /** Connects specified reply and specified article. */\n  readonly CreateArticleReply?: Maybe<ReadonlyArray<Maybe<ArticleReply>>>;\n  /** Create a category */\n  readonly CreateCategory?: Maybe<MutationResult>;\n  /** Adds specified category to specified article. */\n  readonly CreateArticleCategory?: Maybe<ReadonlyArray<Maybe<ArticleCategory>>>;\n  /**\n   * Create or update a reply request for the given article\n   * @deprecated Use CreateOrUpdateReplyRequest instead\n   */\n  readonly CreateReplyRequest?: Maybe<Article>;\n  /** Create or update a reply request for the given article */\n  readonly CreateOrUpdateReplyRequest?: Maybe<Article>;\n  /** Create or update a feedback on an article-reply connection */\n  readonly CreateOrUpdateArticleReplyFeedback?: Maybe<ArticleReply>;\n  /** Create or update a feedback on an article-category connection */\n  readonly CreateOrUpdateArticleCategoryFeedback?: Maybe<ArticleCategory>;\n  /** Create or update a feedback on a reply request reason */\n  readonly CreateOrUpdateReplyRequestFeedback?: Maybe<ReplyRequest>;\n  /** Change status of specified articleReplies */\n  readonly UpdateArticleReplyStatus?: Maybe<ReadonlyArray<Maybe<ArticleReply>>>;\n  /** Change status of specified articleCategory */\n  readonly UpdateArticleCategoryStatus?: Maybe<ReadonlyArray<Maybe<ArticleCategory>>>;\n  /** Change attribute of a user */\n  readonly UpdateUser?: Maybe<User>;\n};\n\n\nexport type MutationCreateArticleArgs = {\n  text: Scalars['String'];\n  reference: ArticleReferenceInput;\n  reason?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationCreateMediaArticleArgs = {\n  mediaUrl: Scalars['String'];\n  articleType: ArticleTypeEnum;\n  reference: ArticleReferenceInput;\n  reason?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationCreateReplyArgs = {\n  articleId: Scalars['String'];\n  text: Scalars['String'];\n  type: ReplyTypeEnum;\n  reference?: Maybe<Scalars['String']>;\n  waitForHyperlinks?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type MutationCreateArticleReplyArgs = {\n  articleId: Scalars['String'];\n  replyId: Scalars['String'];\n};\n\n\nexport type MutationCreateCategoryArgs = {\n  title: Scalars['String'];\n  description: Scalars['String'];\n};\n\n\nexport type MutationCreateArticleCategoryArgs = {\n  articleId: Scalars['String'];\n  categoryId: Scalars['String'];\n  aiModel?: Maybe<Scalars['String']>;\n  aiConfidence?: Maybe<Scalars['Float']>;\n};\n\n\nexport type MutationCreateReplyRequestArgs = {\n  articleId: Scalars['String'];\n  reason?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationCreateOrUpdateReplyRequestArgs = {\n  articleId: Scalars['String'];\n  reason?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationCreateOrUpdateArticleReplyFeedbackArgs = {\n  articleId: Scalars['String'];\n  replyId: Scalars['String'];\n  vote: FeedbackVote;\n  comment?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationCreateOrUpdateArticleCategoryFeedbackArgs = {\n  articleId: Scalars['String'];\n  categoryId: Scalars['String'];\n  vote: FeedbackVote;\n  comment?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationCreateOrUpdateReplyRequestFeedbackArgs = {\n  replyRequestId: Scalars['String'];\n  vote: FeedbackVote;\n};\n\n\nexport type MutationUpdateArticleReplyStatusArgs = {\n  articleId: Scalars['String'];\n  replyId: Scalars['String'];\n  status: ArticleReplyStatusEnum;\n};\n\n\nexport type MutationUpdateArticleCategoryStatusArgs = {\n  articleId: Scalars['String'];\n  categoryId: Scalars['String'];\n  status: ArticleCategoryStatusEnum;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  name?: Maybe<Scalars['String']>;\n  slug?: Maybe<Scalars['String']>;\n  avatarType?: Maybe<AvatarTypeEnum>;\n  avatarData?: Maybe<Scalars['String']>;\n  bio?: Maybe<Scalars['String']>;\n};\n\nexport type MutationResult = {\n  readonly __typename?: 'MutationResult';\n  readonly id?: Maybe<Scalars['String']>;\n};\n\nexport type ArticleReferenceInput = {\n  readonly type: ArticleReferenceTypeEnum;\n  readonly permalink?: Maybe<Scalars['String']>;\n};\n\nexport type LoadApiStatsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LoadApiStatsQuery = (\n  { readonly __typename?: 'Query' }\n  & { readonly allArticles?: Maybe<(\n    { readonly __typename?: 'ArticleConnection' }\n    & Pick<ArticleConnection, 'totalCount'>\n  )>, readonly allRepliedArticles?: Maybe<(\n    { readonly __typename?: 'ArticleConnection' }\n    & Pick<ArticleConnection, 'totalCount'>\n  )>, readonly articlesHasUsefulReplies?: Maybe<(\n    { readonly __typename?: 'ArticleConnection' }\n    & Pick<ArticleConnection, 'totalCount'>\n  )> }\n);\n\nexport type BigNumOfRepliedQueryVariables = Exact<{\n  startTime?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type BigNumOfRepliedQuery = (\n  { readonly __typename?: 'Query' }\n  & { readonly query?: Maybe<(\n    { readonly __typename?: 'ArticleConnection' }\n    & Pick<ArticleConnection, 'totalCount'>\n  )> }\n);\n\nexport type BigNumOfFeedbacksQueryVariables = Exact<{\n  startTime?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type BigNumOfFeedbacksQuery = (\n  { readonly __typename?: 'Query' }\n  & { readonly query?: Maybe<(\n    { readonly __typename?: 'ListArticleReplyFeedbackConnection' }\n    & Pick<ListArticleReplyFeedbackConnection, 'totalCount'>\n  )> }\n);\n\nexport type BigNumOfCommentsQueryVariables = Exact<{\n  startTime?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type BigNumOfCommentsQuery = (\n  { readonly __typename?: 'Query' }\n  & { readonly query?: Maybe<(\n    { readonly __typename?: 'ListReplyRequestConnection' }\n    & Pick<ListReplyRequestConnection, 'totalCount'>\n  )> }\n);\n\nexport type FeedbackListStatInFeedbackTableQueryVariables = Exact<{\n  createdAt?: Maybe<TimeRangeInput>;\n  userId?: Maybe<Scalars['String']>;\n  articleReplyUserId?: Maybe<Scalars['String']>;\n  statuses?: Maybe<ReadonlyArray<ArticleReplyFeedbackStatusEnum>>;\n}>;\n\n\nexport type FeedbackListStatInFeedbackTableQuery = (\n  { readonly __typename?: 'Query' }\n  & { readonly ListArticleReplyFeedbacks?: Maybe<(\n    { readonly __typename?: 'ListArticleReplyFeedbackConnection' }\n    & Pick<ListArticleReplyFeedbackConnection, 'totalCount'>\n    & { readonly pageInfo: (\n      { readonly __typename?: 'ListArticleReplyFeedbackConnectionPageInfo' }\n      & Pick<ListArticleReplyFeedbackConnectionPageInfo, 'firstCursor' | 'lastCursor'>\n    ) }\n  )> }\n);\n\nexport type FeedbackListInFeedbackTableQueryVariables = Exact<{\n  after?: Maybe<Scalars['String']>;\n  pageSize?: Maybe<Scalars['Int']>;\n  createdAt?: Maybe<TimeRangeInput>;\n  userId?: Maybe<Scalars['String']>;\n  articleReplyUserId?: Maybe<Scalars['String']>;\n  statuses?: Maybe<ReadonlyArray<ArticleReplyFeedbackStatusEnum>>;\n}>;\n\n\nexport type FeedbackListInFeedbackTableQuery = (\n  { readonly __typename?: 'Query' }\n  & { readonly ListArticleReplyFeedbacks?: Maybe<(\n    { readonly __typename?: 'ListArticleReplyFeedbackConnection' }\n    & { readonly edges: ReadonlyArray<(\n      { readonly __typename?: 'ListArticleReplyFeedbackConnectionEdge' }\n      & Pick<ListArticleReplyFeedbackConnectionEdge, 'cursor'>\n      & { readonly node: (\n        { readonly __typename?: 'ArticleReplyFeedback' }\n        & Pick<ArticleReplyFeedback, 'id' | 'comment' | 'vote' | 'createdAt'>\n        & { readonly article?: Maybe<(\n          { readonly __typename?: 'Article' }\n          & Pick<Article, 'id' | 'text'>\n          & { readonly articleCategories?: Maybe<ReadonlyArray<Maybe<(\n            { readonly __typename?: 'ArticleCategory' }\n            & Pick<ArticleCategory, 'positiveFeedbackCount' | 'negativeFeedbackCount'>\n            & { readonly category?: Maybe<(\n              { readonly __typename?: 'Category' }\n              & Pick<Category, 'title'>\n            )> }\n          )>>> }\n        )>, readonly reply?: Maybe<(\n          { readonly __typename?: 'Reply' }\n          & Pick<Reply, 'id' | 'text'>\n        )>, readonly user?: Maybe<(\n          { readonly __typename?: 'User' }\n          & Pick<User, 'id' | 'name'>\n        )> }\n      ) }\n    )> }\n  )> }\n);\n\nexport type ReplyRequestListStatInReplyRequestTableQueryVariables = Exact<{\n  createdAt?: Maybe<TimeRangeInput>;\n  userId?: Maybe<Scalars['String']>;\n  statuses?: Maybe<ReadonlyArray<ReplyRequestStatusEnum>>;\n}>;\n\n\nexport type ReplyRequestListStatInReplyRequestTableQuery = (\n  { readonly __typename?: 'Query' }\n  & { readonly ListReplyRequests?: Maybe<(\n    { readonly __typename?: 'ListReplyRequestConnection' }\n    & Pick<ListReplyRequestConnection, 'totalCount'>\n    & { readonly pageInfo: (\n      { readonly __typename?: 'ListReplyRequestConnectionPageInfo' }\n      & Pick<ListReplyRequestConnectionPageInfo, 'firstCursor' | 'lastCursor'>\n    ) }\n  )> }\n);\n\nexport type ReplyRequestListInReplyRequestTableQueryVariables = Exact<{\n  after?: Maybe<Scalars['String']>;\n  pageSize?: Maybe<Scalars['Int']>;\n  createdAt?: Maybe<TimeRangeInput>;\n  userId?: Maybe<Scalars['String']>;\n  statuses?: Maybe<ReadonlyArray<ReplyRequestStatusEnum>>;\n}>;\n\n\nexport type ReplyRequestListInReplyRequestTableQuery = (\n  { readonly __typename?: 'Query' }\n  & { readonly ListReplyRequests?: Maybe<(\n    { readonly __typename?: 'ListReplyRequestConnection' }\n    & { readonly edges: ReadonlyArray<(\n      { readonly __typename?: 'ListReplyRequestConnectionEdge' }\n      & Pick<ListReplyRequestConnectionEdge, 'cursor'>\n      & { readonly node: (\n        { readonly __typename?: 'ReplyRequest' }\n        & Pick<ReplyRequest, 'id' | 'reason' | 'updatedAt'>\n        & { readonly user?: Maybe<(\n          { readonly __typename?: 'User' }\n          & Pick<User, 'id' | 'name'>\n        )>, readonly article: (\n          { readonly __typename?: 'Article' }\n          & Pick<Article, 'id' | 'text'>\n        ) }\n      ) }\n    )> }\n  )> }\n);\n\nexport type ReplyListStatInReplyTableQueryVariables = Exact<{\n  createdAt?: Maybe<TimeRangeInput>;\n  userId?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type ReplyListStatInReplyTableQuery = (\n  { readonly __typename?: 'Query' }\n  & { readonly ListReplies?: Maybe<(\n    { readonly __typename?: 'ReplyConnection' }\n    & Pick<ReplyConnection, 'totalCount'>\n    & { readonly pageInfo: (\n      { readonly __typename?: 'ReplyConnectionPageInfo' }\n      & Pick<ReplyConnectionPageInfo, 'firstCursor' | 'lastCursor'>\n    ) }\n  )> }\n);\n\nexport type ReplyListInReplyTableQueryVariables = Exact<{\n  after?: Maybe<Scalars['String']>;\n  pageSize?: Maybe<Scalars['Int']>;\n  createdAt?: Maybe<TimeRangeInput>;\n  userId?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type ReplyListInReplyTableQuery = (\n  { readonly __typename?: 'Query' }\n  & { readonly ListReplies?: Maybe<(\n    { readonly __typename?: 'ReplyConnection' }\n    & { readonly edges: ReadonlyArray<(\n      { readonly __typename?: 'ReplyConnectionEdge' }\n      & Pick<ReplyConnectionEdge, 'cursor'>\n      & { readonly node: (\n        { readonly __typename?: 'Reply' }\n        & Pick<Reply, 'id' | 'text' | 'createdAt'>\n        & { readonly user?: Maybe<(\n          { readonly __typename?: 'User' }\n          & Pick<User, 'id' | 'name'>\n        )> }\n      ) }\n    )> }\n  )> }\n);\n\n\nexport const LoadApiStatsDocument = gql`\n    query LoadAPIStats {\n  allArticles: ListArticles {\n    totalCount\n  }\n  allRepliedArticles: ListArticles(filter: {replyCount: {GTE: 1}}) {\n    totalCount\n  }\n  articlesHasUsefulReplies: ListArticles(filter: {hasArticleReplyWithMorePositiveFeedback: true}) {\n    totalCount\n  }\n}\n    `;\n\n/**\n * __useLoadApiStatsQuery__\n *\n * To run a query within a React component, call `useLoadApiStatsQuery` and pass it any options that fit your needs.\n * When your component renders, `useLoadApiStatsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLoadApiStatsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useLoadApiStatsQuery(baseOptions?: Apollo.QueryHookOptions<LoadApiStatsQuery, LoadApiStatsQueryVariables>) {\n        return Apollo.useQuery<LoadApiStatsQuery, LoadApiStatsQueryVariables>(LoadApiStatsDocument, baseOptions);\n      }\nexport function useLoadApiStatsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LoadApiStatsQuery, LoadApiStatsQueryVariables>) {\n          return Apollo.useLazyQuery<LoadApiStatsQuery, LoadApiStatsQueryVariables>(LoadApiStatsDocument, baseOptions);\n        }\nexport type LoadApiStatsQueryHookResult = ReturnType<typeof useLoadApiStatsQuery>;\nexport type LoadApiStatsLazyQueryHookResult = ReturnType<typeof useLoadApiStatsLazyQuery>;\nexport type LoadApiStatsQueryResult = Apollo.QueryResult<LoadApiStatsQuery, LoadApiStatsQueryVariables>;\nexport const BigNumOfRepliedDocument = gql`\n    query BigNumOfReplied($startTime: String) {\n  query: ListArticles(filter: {repliedAt: {GTE: $startTime}}) {\n    totalCount\n  }\n}\n    `;\n\n/**\n * __useBigNumOfRepliedQuery__\n *\n * To run a query within a React component, call `useBigNumOfRepliedQuery` and pass it any options that fit your needs.\n * When your component renders, `useBigNumOfRepliedQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBigNumOfRepliedQuery({\n *   variables: {\n *      startTime: // value for 'startTime'\n *   },\n * });\n */\nexport function useBigNumOfRepliedQuery(baseOptions?: Apollo.QueryHookOptions<BigNumOfRepliedQuery, BigNumOfRepliedQueryVariables>) {\n        return Apollo.useQuery<BigNumOfRepliedQuery, BigNumOfRepliedQueryVariables>(BigNumOfRepliedDocument, baseOptions);\n      }\nexport function useBigNumOfRepliedLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BigNumOfRepliedQuery, BigNumOfRepliedQueryVariables>) {\n          return Apollo.useLazyQuery<BigNumOfRepliedQuery, BigNumOfRepliedQueryVariables>(BigNumOfRepliedDocument, baseOptions);\n        }\nexport type BigNumOfRepliedQueryHookResult = ReturnType<typeof useBigNumOfRepliedQuery>;\nexport type BigNumOfRepliedLazyQueryHookResult = ReturnType<typeof useBigNumOfRepliedLazyQuery>;\nexport type BigNumOfRepliedQueryResult = Apollo.QueryResult<BigNumOfRepliedQuery, BigNumOfRepliedQueryVariables>;\nexport const BigNumOfFeedbacksDocument = gql`\n    query BigNumOfFeedbacks($startTime: String) {\n  query: ListArticleReplyFeedbacks(filter: {createdAt: {GTE: $startTime}, appId: \"WEBSITE\"}) {\n    totalCount\n  }\n}\n    `;\n\n/**\n * __useBigNumOfFeedbacksQuery__\n *\n * To run a query within a React component, call `useBigNumOfFeedbacksQuery` and pass it any options that fit your needs.\n * When your component renders, `useBigNumOfFeedbacksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBigNumOfFeedbacksQuery({\n *   variables: {\n *      startTime: // value for 'startTime'\n *   },\n * });\n */\nexport function useBigNumOfFeedbacksQuery(baseOptions?: Apollo.QueryHookOptions<BigNumOfFeedbacksQuery, BigNumOfFeedbacksQueryVariables>) {\n        return Apollo.useQuery<BigNumOfFeedbacksQuery, BigNumOfFeedbacksQueryVariables>(BigNumOfFeedbacksDocument, baseOptions);\n      }\nexport function useBigNumOfFeedbacksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BigNumOfFeedbacksQuery, BigNumOfFeedbacksQueryVariables>) {\n          return Apollo.useLazyQuery<BigNumOfFeedbacksQuery, BigNumOfFeedbacksQueryVariables>(BigNumOfFeedbacksDocument, baseOptions);\n        }\nexport type BigNumOfFeedbacksQueryHookResult = ReturnType<typeof useBigNumOfFeedbacksQuery>;\nexport type BigNumOfFeedbacksLazyQueryHookResult = ReturnType<typeof useBigNumOfFeedbacksLazyQuery>;\nexport type BigNumOfFeedbacksQueryResult = Apollo.QueryResult<BigNumOfFeedbacksQuery, BigNumOfFeedbacksQueryVariables>;\nexport const BigNumOfCommentsDocument = gql`\n    query BigNumOfComments($startTime: String) {\n  query: ListReplyRequests(filter: {createdAt: {GTE: $startTime}, appId: \"WEBSITE\"}) {\n    totalCount\n  }\n}\n    `;\n\n/**\n * __useBigNumOfCommentsQuery__\n *\n * To run a query within a React component, call `useBigNumOfCommentsQuery` and pass it any options that fit your needs.\n * When your component renders, `useBigNumOfCommentsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBigNumOfCommentsQuery({\n *   variables: {\n *      startTime: // value for 'startTime'\n *   },\n * });\n */\nexport function useBigNumOfCommentsQuery(baseOptions?: Apollo.QueryHookOptions<BigNumOfCommentsQuery, BigNumOfCommentsQueryVariables>) {\n        return Apollo.useQuery<BigNumOfCommentsQuery, BigNumOfCommentsQueryVariables>(BigNumOfCommentsDocument, baseOptions);\n      }\nexport function useBigNumOfCommentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BigNumOfCommentsQuery, BigNumOfCommentsQueryVariables>) {\n          return Apollo.useLazyQuery<BigNumOfCommentsQuery, BigNumOfCommentsQueryVariables>(BigNumOfCommentsDocument, baseOptions);\n        }\nexport type BigNumOfCommentsQueryHookResult = ReturnType<typeof useBigNumOfCommentsQuery>;\nexport type BigNumOfCommentsLazyQueryHookResult = ReturnType<typeof useBigNumOfCommentsLazyQuery>;\nexport type BigNumOfCommentsQueryResult = Apollo.QueryResult<BigNumOfCommentsQuery, BigNumOfCommentsQueryVariables>;\nexport const FeedbackListStatInFeedbackTableDocument = gql`\n    query FeedbackListStatInFeedbackTable($createdAt: TimeRangeInput, $userId: String, $articleReplyUserId: String, $statuses: [ArticleReplyFeedbackStatusEnum!]) {\n  ListArticleReplyFeedbacks(filter: {createdAt: $createdAt, userId: $userId, articleReplyUserId: $articleReplyUserId, statuses: $statuses}) {\n    totalCount\n    pageInfo {\n      firstCursor\n      lastCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useFeedbackListStatInFeedbackTableQuery__\n *\n * To run a query within a React component, call `useFeedbackListStatInFeedbackTableQuery` and pass it any options that fit your needs.\n * When your component renders, `useFeedbackListStatInFeedbackTableQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFeedbackListStatInFeedbackTableQuery({\n *   variables: {\n *      createdAt: // value for 'createdAt'\n *      userId: // value for 'userId'\n *      articleReplyUserId: // value for 'articleReplyUserId'\n *      statuses: // value for 'statuses'\n *   },\n * });\n */\nexport function useFeedbackListStatInFeedbackTableQuery(baseOptions?: Apollo.QueryHookOptions<FeedbackListStatInFeedbackTableQuery, FeedbackListStatInFeedbackTableQueryVariables>) {\n        return Apollo.useQuery<FeedbackListStatInFeedbackTableQuery, FeedbackListStatInFeedbackTableQueryVariables>(FeedbackListStatInFeedbackTableDocument, baseOptions);\n      }\nexport function useFeedbackListStatInFeedbackTableLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FeedbackListStatInFeedbackTableQuery, FeedbackListStatInFeedbackTableQueryVariables>) {\n          return Apollo.useLazyQuery<FeedbackListStatInFeedbackTableQuery, FeedbackListStatInFeedbackTableQueryVariables>(FeedbackListStatInFeedbackTableDocument, baseOptions);\n        }\nexport type FeedbackListStatInFeedbackTableQueryHookResult = ReturnType<typeof useFeedbackListStatInFeedbackTableQuery>;\nexport type FeedbackListStatInFeedbackTableLazyQueryHookResult = ReturnType<typeof useFeedbackListStatInFeedbackTableLazyQuery>;\nexport type FeedbackListStatInFeedbackTableQueryResult = Apollo.QueryResult<FeedbackListStatInFeedbackTableQuery, FeedbackListStatInFeedbackTableQueryVariables>;\nexport const FeedbackListInFeedbackTableDocument = gql`\n    query FeedbackListInFeedbackTable($after: String, $pageSize: Int, $createdAt: TimeRangeInput, $userId: String, $articleReplyUserId: String, $statuses: [ArticleReplyFeedbackStatusEnum!]) {\n  ListArticleReplyFeedbacks(filter: {createdAt: $createdAt, userId: $userId, articleReplyUserId: $articleReplyUserId, statuses: $statuses}, orderBy: [{createdAt: DESC}], after: $after, first: $pageSize) {\n    edges {\n      cursor\n      node {\n        id\n        comment\n        vote\n        article {\n          id\n          text\n          articleCategories(statuses: [NORMAL]) {\n            category {\n              title\n            }\n            positiveFeedbackCount\n            negativeFeedbackCount\n          }\n        }\n        reply {\n          id\n          text\n        }\n        user {\n          id\n          name\n        }\n        createdAt\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useFeedbackListInFeedbackTableQuery__\n *\n * To run a query within a React component, call `useFeedbackListInFeedbackTableQuery` and pass it any options that fit your needs.\n * When your component renders, `useFeedbackListInFeedbackTableQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFeedbackListInFeedbackTableQuery({\n *   variables: {\n *      after: // value for 'after'\n *      pageSize: // value for 'pageSize'\n *      createdAt: // value for 'createdAt'\n *      userId: // value for 'userId'\n *      articleReplyUserId: // value for 'articleReplyUserId'\n *      statuses: // value for 'statuses'\n *   },\n * });\n */\nexport function useFeedbackListInFeedbackTableQuery(baseOptions?: Apollo.QueryHookOptions<FeedbackListInFeedbackTableQuery, FeedbackListInFeedbackTableQueryVariables>) {\n        return Apollo.useQuery<FeedbackListInFeedbackTableQuery, FeedbackListInFeedbackTableQueryVariables>(FeedbackListInFeedbackTableDocument, baseOptions);\n      }\nexport function useFeedbackListInFeedbackTableLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FeedbackListInFeedbackTableQuery, FeedbackListInFeedbackTableQueryVariables>) {\n          return Apollo.useLazyQuery<FeedbackListInFeedbackTableQuery, FeedbackListInFeedbackTableQueryVariables>(FeedbackListInFeedbackTableDocument, baseOptions);\n        }\nexport type FeedbackListInFeedbackTableQueryHookResult = ReturnType<typeof useFeedbackListInFeedbackTableQuery>;\nexport type FeedbackListInFeedbackTableLazyQueryHookResult = ReturnType<typeof useFeedbackListInFeedbackTableLazyQuery>;\nexport type FeedbackListInFeedbackTableQueryResult = Apollo.QueryResult<FeedbackListInFeedbackTableQuery, FeedbackListInFeedbackTableQueryVariables>;\nexport const ReplyRequestListStatInReplyRequestTableDocument = gql`\n    query ReplyRequestListStatInReplyRequestTable($createdAt: TimeRangeInput, $userId: String, $statuses: [ReplyRequestStatusEnum!]) {\n  ListReplyRequests(filter: {createdAt: $createdAt, userId: $userId, statuses: $statuses}) {\n    totalCount\n    pageInfo {\n      firstCursor\n      lastCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useReplyRequestListStatInReplyRequestTableQuery__\n *\n * To run a query within a React component, call `useReplyRequestListStatInReplyRequestTableQuery` and pass it any options that fit your needs.\n * When your component renders, `useReplyRequestListStatInReplyRequestTableQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReplyRequestListStatInReplyRequestTableQuery({\n *   variables: {\n *      createdAt: // value for 'createdAt'\n *      userId: // value for 'userId'\n *      statuses: // value for 'statuses'\n *   },\n * });\n */\nexport function useReplyRequestListStatInReplyRequestTableQuery(baseOptions?: Apollo.QueryHookOptions<ReplyRequestListStatInReplyRequestTableQuery, ReplyRequestListStatInReplyRequestTableQueryVariables>) {\n        return Apollo.useQuery<ReplyRequestListStatInReplyRequestTableQuery, ReplyRequestListStatInReplyRequestTableQueryVariables>(ReplyRequestListStatInReplyRequestTableDocument, baseOptions);\n      }\nexport function useReplyRequestListStatInReplyRequestTableLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ReplyRequestListStatInReplyRequestTableQuery, ReplyRequestListStatInReplyRequestTableQueryVariables>) {\n          return Apollo.useLazyQuery<ReplyRequestListStatInReplyRequestTableQuery, ReplyRequestListStatInReplyRequestTableQueryVariables>(ReplyRequestListStatInReplyRequestTableDocument, baseOptions);\n        }\nexport type ReplyRequestListStatInReplyRequestTableQueryHookResult = ReturnType<typeof useReplyRequestListStatInReplyRequestTableQuery>;\nexport type ReplyRequestListStatInReplyRequestTableLazyQueryHookResult = ReturnType<typeof useReplyRequestListStatInReplyRequestTableLazyQuery>;\nexport type ReplyRequestListStatInReplyRequestTableQueryResult = Apollo.QueryResult<ReplyRequestListStatInReplyRequestTableQuery, ReplyRequestListStatInReplyRequestTableQueryVariables>;\nexport const ReplyRequestListInReplyRequestTableDocument = gql`\n    query ReplyRequestListInReplyRequestTable($after: String, $pageSize: Int, $createdAt: TimeRangeInput, $userId: String, $statuses: [ReplyRequestStatusEnum!]) {\n  ListReplyRequests(filter: {createdAt: $createdAt, userId: $userId, statuses: $statuses}, orderBy: [{createdAt: DESC}], after: $after, first: $pageSize) {\n    edges {\n      cursor\n      node {\n        id\n        reason\n        updatedAt\n        user {\n          id\n          name\n        }\n        article {\n          id\n          text\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useReplyRequestListInReplyRequestTableQuery__\n *\n * To run a query within a React component, call `useReplyRequestListInReplyRequestTableQuery` and pass it any options that fit your needs.\n * When your component renders, `useReplyRequestListInReplyRequestTableQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReplyRequestListInReplyRequestTableQuery({\n *   variables: {\n *      after: // value for 'after'\n *      pageSize: // value for 'pageSize'\n *      createdAt: // value for 'createdAt'\n *      userId: // value for 'userId'\n *      statuses: // value for 'statuses'\n *   },\n * });\n */\nexport function useReplyRequestListInReplyRequestTableQuery(baseOptions?: Apollo.QueryHookOptions<ReplyRequestListInReplyRequestTableQuery, ReplyRequestListInReplyRequestTableQueryVariables>) {\n        return Apollo.useQuery<ReplyRequestListInReplyRequestTableQuery, ReplyRequestListInReplyRequestTableQueryVariables>(ReplyRequestListInReplyRequestTableDocument, baseOptions);\n      }\nexport function useReplyRequestListInReplyRequestTableLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ReplyRequestListInReplyRequestTableQuery, ReplyRequestListInReplyRequestTableQueryVariables>) {\n          return Apollo.useLazyQuery<ReplyRequestListInReplyRequestTableQuery, ReplyRequestListInReplyRequestTableQueryVariables>(ReplyRequestListInReplyRequestTableDocument, baseOptions);\n        }\nexport type ReplyRequestListInReplyRequestTableQueryHookResult = ReturnType<typeof useReplyRequestListInReplyRequestTableQuery>;\nexport type ReplyRequestListInReplyRequestTableLazyQueryHookResult = ReturnType<typeof useReplyRequestListInReplyRequestTableLazyQuery>;\nexport type ReplyRequestListInReplyRequestTableQueryResult = Apollo.QueryResult<ReplyRequestListInReplyRequestTableQuery, ReplyRequestListInReplyRequestTableQueryVariables>;\nexport const ReplyListStatInReplyTableDocument = gql`\n    query ReplyListStatInReplyTable($createdAt: TimeRangeInput, $userId: String) {\n  ListReplies(filter: {createdAt: $createdAt, userId: $userId}) {\n    totalCount\n    pageInfo {\n      firstCursor\n      lastCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useReplyListStatInReplyTableQuery__\n *\n * To run a query within a React component, call `useReplyListStatInReplyTableQuery` and pass it any options that fit your needs.\n * When your component renders, `useReplyListStatInReplyTableQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReplyListStatInReplyTableQuery({\n *   variables: {\n *      createdAt: // value for 'createdAt'\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useReplyListStatInReplyTableQuery(baseOptions?: Apollo.QueryHookOptions<ReplyListStatInReplyTableQuery, ReplyListStatInReplyTableQueryVariables>) {\n        return Apollo.useQuery<ReplyListStatInReplyTableQuery, ReplyListStatInReplyTableQueryVariables>(ReplyListStatInReplyTableDocument, baseOptions);\n      }\nexport function useReplyListStatInReplyTableLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ReplyListStatInReplyTableQuery, ReplyListStatInReplyTableQueryVariables>) {\n          return Apollo.useLazyQuery<ReplyListStatInReplyTableQuery, ReplyListStatInReplyTableQueryVariables>(ReplyListStatInReplyTableDocument, baseOptions);\n        }\nexport type ReplyListStatInReplyTableQueryHookResult = ReturnType<typeof useReplyListStatInReplyTableQuery>;\nexport type ReplyListStatInReplyTableLazyQueryHookResult = ReturnType<typeof useReplyListStatInReplyTableLazyQuery>;\nexport type ReplyListStatInReplyTableQueryResult = Apollo.QueryResult<ReplyListStatInReplyTableQuery, ReplyListStatInReplyTableQueryVariables>;\nexport const ReplyListInReplyTableDocument = gql`\n    query ReplyListInReplyTable($after: String, $pageSize: Int, $createdAt: TimeRangeInput, $userId: String) {\n  ListReplies(filter: {createdAt: $createdAt, userId: $userId}, orderBy: [{createdAt: DESC}], after: $after, first: $pageSize) {\n    edges {\n      cursor\n      node {\n        id\n        text\n        user {\n          id\n          name\n        }\n        createdAt\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useReplyListInReplyTableQuery__\n *\n * To run a query within a React component, call `useReplyListInReplyTableQuery` and pass it any options that fit your needs.\n * When your component renders, `useReplyListInReplyTableQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReplyListInReplyTableQuery({\n *   variables: {\n *      after: // value for 'after'\n *      pageSize: // value for 'pageSize'\n *      createdAt: // value for 'createdAt'\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useReplyListInReplyTableQuery(baseOptions?: Apollo.QueryHookOptions<ReplyListInReplyTableQuery, ReplyListInReplyTableQueryVariables>) {\n        return Apollo.useQuery<ReplyListInReplyTableQuery, ReplyListInReplyTableQueryVariables>(ReplyListInReplyTableDocument, baseOptions);\n      }\nexport function useReplyListInReplyTableLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ReplyListInReplyTableQuery, ReplyListInReplyTableQueryVariables>) {\n          return Apollo.useLazyQuery<ReplyListInReplyTableQuery, ReplyListInReplyTableQueryVariables>(ReplyListInReplyTableDocument, baseOptions);\n        }\nexport type ReplyListInReplyTableQueryHookResult = ReturnType<typeof useReplyListInReplyTableQuery>;\nexport type ReplyListInReplyTableLazyQueryHookResult = ReturnType<typeof useReplyListInReplyTableLazyQuery>;\nexport type ReplyListInReplyTableQueryResult = Apollo.QueryResult<ReplyListInReplyTableQuery, ReplyListInReplyTableQueryVariables>;","import { ApolloClient, ApolloLink, InMemoryCache } from '@apollo/client';\nimport { BatchHttpLink } from '@apollo/client/link/batch-http';\nimport { relayStylePagination } from '@apollo/client/utilities';\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    new BatchHttpLink({\n      uri: `${process.env.REACT_APP_API_URL}/graphql`,\n      headers: {\n        'x-app-id': 'RUMORS_SITE',\n      },\n    }),\n  ]),\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          ListReplies: relayStylePagination(['filter']),\n          ListReplyRequests: relayStylePagination(['filter']),\n          ListArticleReplyFeedbacks: relayStylePagination(['filter']),\n        },\n      },\n    },\n  }),\n});\n\nexport default client;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport red from '@material-ui/core/colors/red';\n\n// Create a theme instance.\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#ffb600',\n      50: '#fff890',\n      100: '#fff000',\n      200: '#ffe200',\n      300: '#ffd300',\n      400: '#ffc500',\n      500: '#ffb600',\n      600: '#ffa300',\n      700: '#ff9200',\n      800: '#ff7f00',\n      900: '#ff6d00',\n      light: '#fafafa',\n      dark: '#e8e8e8',\n    },\n    secondary: {\n      main: '#333333',\n      50: '#f5f5f5',\n      100: '#d6d6d6',\n      200: '#adadad',\n      300: '#858585',\n      400: '#5c5c5c',\n      500: '#333333',\n      600: '#2e2e2e',\n      700: '#292929',\n      800: '#242424',\n      900: '#1f1f1f',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#f5f5f5',\n    },\n  },\n  typography: {\n    fontFamily: '\"Noto Sans TC\", \"Helvetica\", \"Arial\", sans-serif',\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport { Link, LinkProps } from 'react-router-dom';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst useStyles = makeStyles({\n  link: {\n    textDecoration: 'none',\n  },\n});\n\ntype FunctionButtonProps = {\n  to: LinkProps['to'];\n  title: string;\n  description: string;\n};\n\nconst FunctionButton: React.FC<FunctionButtonProps> = ({\n  to,\n  title,\n  description,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Grid item xs={12} sm={6}>\n      <Link className={classes.link} to={to}>\n        <Card>\n          <CardActionArea>\n            <CardContent>\n              <Typography variant=\"h5\" gutterBottom>\n                {title}\n              </Typography>\n              <Typography variant=\"body1\">{description}</Typography>\n            </CardContent>\n          </CardActionArea>\n        </Card>\n      </Link>\n    </Grid>\n  );\n};\n\nconst Home: React.FC = () => {\n  return (\n    <Grid container spacing={2}>\n      <FunctionButton\n        to=\"/stats\"\n        title=\"Statistics\"\n        description=\"Real-time statistics from Cofacts API\"\n      />\n      <FunctionButton\n        to=\"/need-to-check/setup\"\n        title=\"Message to check\"\n        description=\"View list of messages that needs to be checked by editors\"\n      />\n      <FunctionButton\n        to=\"/editorworks\"\n        title=\"Thank you editors\"\n        description=\"List of recent works from editors\"\n      />\n      <FunctionButton\n        to=\"/bignum/setup\"\n        title=\"Big Numbers\"\n        description=\"Instant number display to project in meetups\"\n      />\n    </Grid>\n  );\n};\n\nexport default Home;\n","/**\n * Converts 1234 to \"1,234\"\n *\n * @param num The number to convert\n */\nexport function getThousandSep(num: number): string {\n  return num.toString().replace(/(\\d{1,3})(?=(\\d{3})+$)/, '$1,');\n}\n\n/**\n * @param enum\n * @returns type guard of the enum\n */\nexport function isSomeEnum<T>(e: T) {\n  return (token: any): token is T[keyof T] =>\n    Object.values(e).includes(token as T[keyof T]);\n}\n","/* eslint-disable */\n// @ts-nocheck\n\nimport React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nconst BATCH_SIZE = 25;\n\nexport enum SortOrder {\n  desc = 'desc',\n  asc = 'asc',\n}\n\ntype Setup = {\n  notRepliedCount: number;\n  notRepliedSortBy: string;\n  notRepliedSortOrder: SortOrder;\n  noUsefulCount: number;\n  noUsefulSortBy: string;\n  noUsefulSortOrder: SortOrder;\n};\n\nconst NeedToCheck: React.FC = () => {\n  const { search } = useLocation();\n  const searchParams = new URLSearchParams(search);\n  const notRepliedCount = +searchParams.get(\n    'notRepliedCount'\n  ) as Setup['notRepliedCount'];\n  const notRepliedSortBy = searchParams.get(\n    'notRepliedSortBy'\n  ) as Setup['notRepliedSortBy'];\n  const notRepliedSortOrder = searchParams.get(\n    'notRepliedSortOrder'\n  ) as Setup['notRepliedSortOrder'];\n  const noUsefulCount = +searchParams.get(\n    'noUsefulCount'\n  ) as Setup['noUsefulCount'];\n  const noUsefulSortBy = searchParams.get(\n    'noUsefulSortBy'\n  ) as Setup['noUsefulSortBy'];\n  const noUsefulSortOrder = searchParams.get(\n    'noUsefulSortOrder'\n  ) as Setup['noUsefulSortOrder'];\n\n  return <div>Need-to-check table</div>;\n};\n\nexport default NeedToCheck;\n","import React from 'react';\nimport { useLoadApiStatsQuery } from '../types';\nimport { getThousandSep } from '../lib/util';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst POLLING_INTERVAL = 5000;\n\ntype StatItemProps = {\n  name: string;\n  value: string;\n};\n\nconst StatItem: React.FC<StatItemProps> = ({ name, value }) => {\n  return (\n    <Grid item xs={12} sm={4}>\n      <Card>\n        <CardContent>\n          <Typography variant=\"body1\" gutterBottom>\n            {name}\n          </Typography>\n          <Typography variant=\"h5\">{value}</Typography>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nconst APIStats: React.FC = () => {\n  const { data, loading } = useLoadApiStatsQuery({\n    pollInterval: POLLING_INTERVAL,\n  });\n\n  if (loading) {\n    return (\n      <Typography align=\"center\" component=\"div\">\n        <CircularProgress size={64} />\n      </Typography>\n    );\n  }\n\n  return (\n    <Grid container spacing={2}>\n      <StatItem\n        name=\"All messages\"\n        value={getThousandSep(data?.allArticles?.totalCount || 0)}\n      />\n      <StatItem\n        name=\"Replied messages\"\n        value={getThousandSep(data?.allRepliedArticles?.totalCount || 0)}\n      />\n      <StatItem\n        name=\"Has useful replies\"\n        value={getThousandSep(data?.articlesHasUsefulReplies?.totalCount || 0)}\n      />\n    </Grid>\n  );\n};\n\nexport default APIStats;\n","import React from 'react';\n\nconst NeedToCheckSetup: React.FC = () => {\n  return <div>Need-to-check form</div>;\n};\n\nexport default NeedToCheckSetup;\n","import { useLocation, useHistory } from 'react-router-dom';\n\nexport enum WorkType {\n  REPLY,\n  ARTICLE_REPLY_FEEDBACK,\n  REPLY_REQUEST,\n}\n\n/**\n * Parameters to store in URL search string for editor works page\n */\ntype ParamsFromUrl = Readonly<{\n  workType: WorkType;\n  day: number;\n  userId?: string;\n  /** For feedback list. Lists feedbacks for a specific creator of article replies. */\n  articleReplyUserId?: string;\n  showAll?: boolean;\n}>;\n\n/**\n * Goes to the URL specified by `p`.\n */\ntype GoFn = (p: ParamsFromUrl) => void;\n\n/**\n * @param p\n * @returns URLSearchParams instance for the given params\n */\nexport function getSearchString(p: ParamsFromUrl): URLSearchParams {\n  return new URLSearchParams({\n    type: p.workType.toString(),\n    day: p.day.toString(),\n    ...(p.userId ? { userId: p.userId } : {}),\n    ...(p.articleReplyUserId\n      ? { articleReplyUserId: p.articleReplyUserId }\n      : {}),\n    ...(p.showAll ? { showAll: '1' } : {}),\n  });\n}\n\n/**\n * Retrieves the current params from search string, and a function to navigate to new params\n */\nexport function useUrlParams(): [ParamsFromUrl, GoFn] {\n  const { search, pathname } = useLocation();\n  const { push } = useHistory();\n  const searchParams = new URLSearchParams(search);\n\n  return [\n    {\n      workType: +(searchParams.get('type') ?? WorkType.REPLY),\n      day: +(searchParams.get('day') ?? 7),\n      userId: searchParams.get('userId') || undefined,\n      articleReplyUserId: searchParams.get('articleReplyUserId') || undefined,\n      showAll: !!searchParams.get('showAll'),\n    },\n    (p) => {\n      push(`${pathname}?${getSearchString(p)}`);\n    },\n  ];\n}\n","/**\n * Wraps Material-UI data grid to make a server-paginated uncontrolled data table.\n */\n\nimport React, { useState } from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\n\nexport const PAGE_SIZE = 50;\n\ntype DataGridProps = React.ComponentPropsWithoutRef<typeof DataGrid>;\n\ntype Props = {\n  /**\n   * All rows that are currently loaded, starting from first row to the last row currently loaded.\n   */\n  currentlyLoadedRows: DataGridProps['rows'];\n\n  /**\n   * Invoked when the table should load new rows.\n   */\n  onNewPageRequest: (page: number) => void;\n} & Omit<\n  // Remove fields that may confuse user if given\n  DataGridProps,\n  | 'rows'\n  | 'rowsPerPageOptions'\n  | 'onPageChange'\n  | 'hideFooterPagination'\n  | 'pagination'\n>;\n\nconst DataTable: React.FC<Props> = ({\n  currentlyLoadedRows,\n  onNewPageRequest,\n  loading,\n  ...otherDataGridProps\n}) => {\n  const [page, setPage] = useState<number>(0);\n  // Determine already loaded page idx according to data already in cache\n  const [loadedPageIdx, setLoadedPageIdx] = useState<number>(\n    () => Math.floor(currentlyLoadedRows.length / PAGE_SIZE) - 1\n  );\n\n  const handlePageChange: DataGridProps['onPageChange'] = (page) => {\n    setPage(page);\n\n    // Nothing is required when paginating between already loaded pages\n    if (page <= loadedPageIdx) return;\n\n    onNewPageRequest(page);\n    setLoadedPageIdx(page);\n  };\n\n  return (\n    <DataGrid\n      {...otherDataGridProps}\n      rows={currentlyLoadedRows.slice(page * PAGE_SIZE)}\n      pagination\n      disableSelectionOnClick\n      page={page}\n      pageSize={PAGE_SIZE}\n      paginationMode=\"server\"\n      rowsPerPageOptions={[PAGE_SIZE]}\n      onPageChange={handlePageChange}\n      loading={loading}\n      hideFooterPagination={loading}\n    />\n  );\n};\n\nexport default DataTable;\n","import React from 'react';\nimport { styled } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport { Link as RRLink } from 'react-router-dom';\nimport DataTable, { PAGE_SIZE } from '../../components/DataTable';\nimport { GridColDef } from '@mui/x-data-grid';\nimport { getSearchString, WorkType } from './util';\n\nimport {\n  useReplyListInReplyTableQuery,\n  useReplyListStatInReplyTableQuery,\n  ReplyListInReplyTableQuery,\n} from '../../types';\n\ntype User = NonNullable<\n  ReplyListInReplyTableQuery['ListReplies']\n>['edges'][number]['node']['user'];\n\ntype CreatedAt = NonNullable<\n  ReplyListInReplyTableQuery['ListReplies']\n>['edges'][number]['node']['createdAt'];\n\nconst TextCell = styled('div')({\n  width: '100%',\n  overflow: 'hidden',\n  display: '-webkit-box',\n  whiteSpace: 'normal',\n  lineHeight: 1.2,\n  '-webkit-box-orient': 'vertical',\n  '-webkit-line-clamp': 3,\n});\n\nconst COLUMNS: GridColDef[] = [\n  {\n    field: 'author',\n    headerName: 'Author',\n    width: 120,\n    renderCell(params) {\n      const user = params.getValue(params.id, 'user') as User;\n      if (!user) return <div />;\n      return (\n        <RRLink\n          to={`?${getSearchString({\n            workType: WorkType.REPLY,\n            day: 7,\n            userId: user.id,\n            showAll: true,\n          })}`}\n        >\n          {user.name}\n        </RRLink>\n      );\n    },\n  },\n  {\n    field: 'text',\n    headerName: 'Text',\n    width: 480,\n    renderCell(params) {\n      const text = params.getValue(params.id, 'text');\n      const replyId = params.getValue(params.id, 'id');\n      if (!replyId || !text) return <div />;\n      return (\n        <TextCell>\n          <Link\n            href={`${process.env.REACT_APP_SITE_URL}/reply/${replyId}`}\n            color=\"textPrimary\"\n            variant=\"body2\"\n          >\n            {text}\n          </Link>\n        </TextCell>\n      );\n    },\n  },\n  {\n    field: 'createdAt',\n    headerName: 'Created At',\n    width: 200,\n    valueGetter: (params) => {\n      const createdAt = params.value as CreatedAt;\n      if (!createdAt) {\n        return '';\n      }\n\n      return new Date(createdAt).toLocaleString();\n    },\n  },\n];\n\ntype Props = {\n  /** Elasticsearch supported time string */\n  startDate?: string;\n  /** Elasticsearch supported time string */\n  endDate?: string;\n  userId?: string;\n};\n\nconst ReplyTable: React.FC<Props> = ({ startDate, endDate, userId }) => {\n  const createdAtFilter = {\n    GTE: startDate,\n    LTE: endDate,\n  };\n\n  const {\n    data: statData,\n    loading: statLoading,\n    error: statError,\n  } = useReplyListStatInReplyTableQuery({\n    variables: { createdAt: createdAtFilter, userId },\n  });\n  const { data, loading, error, fetchMore } = useReplyListInReplyTableQuery({\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      pageSize: PAGE_SIZE,\n      createdAt: createdAtFilter,\n      userId,\n    },\n  });\n\n  if (error) {\n    return <p>Error: {error}</p>;\n  }\n  if (statError) {\n    return <p>Error: {statError}</p>;\n  }\n\n  const edges = data?.ListReplies?.edges || [];\n  return (\n    <DataTable\n      currentlyLoadedRows={edges.map(({ node }) => node)}\n      columns={COLUMNS}\n      rowHeight={64}\n      rowCount={statData?.ListReplies?.totalCount || 0}\n      onNewPageRequest={() =>\n        fetchMore({\n          variables: { after: edges[edges.length - 1].cursor },\n        })\n      }\n      loading={loading || statLoading}\n    />\n  );\n};\n\nexport default ReplyTable;\n","import React from 'react';\nimport { styled } from '@material-ui/core/styles';\nimport Chip from '@material-ui/core/Chip';\nimport Link from '@material-ui/core/Link';\nimport { Link as RRLink } from 'react-router-dom';\nimport Typography from '@material-ui/core/Typography';\nimport DataTable, { PAGE_SIZE } from '../../components/DataTable';\nimport { GridColDef } from '@mui/x-data-grid';\nimport { getSearchString, WorkType } from './util';\n\nimport {\n  useFeedbackListInFeedbackTableQuery,\n  useFeedbackListStatInFeedbackTableQuery,\n  FeedbackListInFeedbackTableQuery,\n  FeedbackVote,\n  ArticleReplyFeedbackStatusEnum,\n} from '../../types';\n\ntype User = NonNullable<\n  FeedbackListInFeedbackTableQuery['ListArticleReplyFeedbacks']\n>['edges'][number]['node']['user'];\n\ntype Article = NonNullable<\n  FeedbackListInFeedbackTableQuery['ListArticleReplyFeedbacks']\n>['edges'][number]['node']['article'];\n\ntype Reply = NonNullable<\n  FeedbackListInFeedbackTableQuery['ListArticleReplyFeedbacks']\n>['edges'][number]['node']['reply'];\n\ntype CreatedAt = NonNullable<\n  FeedbackListInFeedbackTableQuery['ListArticleReplyFeedbacks']\n>['edges'][number]['node']['createdAt'];\n\ntype ArticleCategory = NonNullable<\n  NonNullable<Article>['articleCategories']\n>[number];\n\ntype ValidArticleCategory = NonNullable<ArticleCategory> & {\n  category: NonNullable<NonNullable<ArticleCategory>['category']>;\n};\n\nfunction isValidArticleCategory(\n  ar: ArticleCategory\n): ar is ValidArticleCategory {\n  return (\n    !!ar &&\n    typeof ar.positiveFeedbackCount === 'number' &&\n    typeof ar.negativeFeedbackCount === 'number' &&\n    ar.positiveFeedbackCount >= ar.negativeFeedbackCount\n  );\n}\n\nconst TextCell = styled('div')({\n  width: '100%',\n  overflow: 'hidden',\n  display: '-webkit-box',\n  whiteSpace: 'normal',\n  lineHeight: 1.2,\n  '-webkit-box-orient': 'vertical',\n  '-webkit-line-clamp': 3,\n});\n\nconst COLUMNS: GridColDef[] = [\n  {\n    field: 'author',\n    headerName: 'Author',\n    width: 160,\n    renderCell(params) {\n      const user = params.getValue(params.id, 'user') as User;\n      if (!user) return <div />;\n      return (\n        <RRLink\n          to={`?${getSearchString({\n            workType: WorkType.ARTICLE_REPLY_FEEDBACK,\n            day: 7,\n            userId: user.id,\n            showAll: true,\n          })}`}\n        >\n          {user.name}\n        </RRLink>\n      );\n    },\n  },\n  {\n    field: 'vote',\n    headerName: 'Vote',\n    width: 48,\n    valueGetter: (params) => {\n      switch (params.value) {\n        case FeedbackVote.Upvote:\n          return '👍';\n        case FeedbackVote.Downvote:\n          return '👎';\n        default:\n          return '--';\n      }\n    },\n  },\n  {\n    field: 'comment',\n    headerName: 'Comment',\n    width: 300,\n    renderCell(params) {\n      const comment = params.value;\n      return <TextCell>{comment}</TextCell>;\n    },\n  },\n  {\n    field: 'target',\n    headerName: 'Article & Reply',\n    width: 300,\n    renderCell(params) {\n      const article = params.getValue(params.id, 'article') as Article;\n      const reply = params.getValue(params.id, 'reply') as Reply;\n      return (\n        <div>\n          {article && (\n            <Link\n              href={`${process.env.REACT_APP_SITE_URL}/article/${article.id}`}\n              color=\"textPrimary\"\n              variant=\"body2\"\n            >\n              <Typography variant=\"body2\" title={article.text || ''}>\n                {article.text || ''}\n              </Typography>\n            </Link>\n          )}\n          {reply && (\n            <Link\n              href={`${process.env.REACT_APP_SITE_URL}/reply/${reply.id}`}\n              color=\"textPrimary\"\n              variant=\"body2\"\n            >\n              <Typography variant=\"body2\" title={reply.text || ''}>\n                {reply.text || ''}\n              </Typography>\n            </Link>\n          )}\n        </div>\n      );\n    },\n  },\n  {\n    field: 'createdAt',\n    headerName: 'Created At',\n    width: 175,\n    valueGetter: (params) => {\n      const createdAt = params.value as CreatedAt;\n      if (!createdAt) {\n        return '';\n      }\n\n      return new Date(createdAt).toLocaleString();\n    },\n  },\n  {\n    field: 'categories',\n    headerName: 'Article category',\n    width: 240,\n    renderCell(params) {\n      const article = params.getValue(params.id, 'article') as Article;\n      const categories = (article?.articleCategories || []).filter(\n        isValidArticleCategory\n      );\n      if (categories.length === 0) return '';\n\n      return (\n        <TextCell>\n          {categories.map(({ category }, idx) => (\n            <Chip\n              size=\"small\"\n              key={idx}\n              label={category.title}\n              style={{ margin: ' 0 1px 1px 0' }}\n            />\n          ))}\n        </TextCell>\n      );\n    },\n  },\n];\n\nconst NORMAL_STATUSES = [ArticleReplyFeedbackStatusEnum.Normal];\nconst ALL_STATUSES = [\n  ArticleReplyFeedbackStatusEnum.Normal,\n  ArticleReplyFeedbackStatusEnum.Blocked,\n];\n\ntype Props = {\n  /** Elasticsearch supported time string */\n  startDate?: string;\n  /** Elasticsearch supported time string */\n  endDate?: string;\n  userId?: string;\n  articleReplyUserId?: string;\n  /** Also shows BLOCKED feedbacks if true */\n  showAll?: boolean;\n};\n\nconst ReplyTable: React.FC<Props> = ({\n  startDate,\n  endDate,\n  userId,\n  articleReplyUserId,\n  showAll,\n}) => {\n  const createdAtFilter = {\n    GTE: startDate,\n    LTE: endDate,\n  };\n  const statuses = showAll ? ALL_STATUSES : NORMAL_STATUSES;\n\n  const {\n    data: statData,\n    loading: statLoading,\n    error: statError,\n  } = useFeedbackListStatInFeedbackTableQuery({\n    variables: {\n      createdAt: createdAtFilter,\n      userId,\n      articleReplyUserId,\n      statuses,\n    },\n  });\n  const {\n    data,\n    loading,\n    error,\n    fetchMore,\n  } = useFeedbackListInFeedbackTableQuery({\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      pageSize: PAGE_SIZE,\n      createdAt: createdAtFilter,\n      userId,\n      articleReplyUserId,\n      statuses,\n    },\n  });\n\n  if (error) {\n    return <p>Error: {error}</p>;\n  }\n  if (statError) {\n    return <p>Error: {statError}</p>;\n  }\n\n  const edges = data?.ListArticleReplyFeedbacks?.edges || [];\n  return (\n    <DataTable\n      currentlyLoadedRows={edges.map(({ node }) => node)}\n      columns={COLUMNS}\n      rowHeight={64}\n      rowCount={statData?.ListArticleReplyFeedbacks?.totalCount || 0}\n      onNewPageRequest={() =>\n        fetchMore({\n          variables: { after: edges[edges.length - 1].cursor },\n        })\n      }\n      loading={loading || statLoading}\n    />\n  );\n};\n\nexport default ReplyTable;\n","import React from 'react';\nimport { styled } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport { Link as RRLink } from 'react-router-dom';\nimport Typography from '@material-ui/core/Typography';\nimport DataTable, { PAGE_SIZE } from '../../components/DataTable';\nimport { GridColDef } from '@mui/x-data-grid';\nimport { getSearchString, WorkType } from './util';\n\nimport {\n  useReplyRequestListInReplyRequestTableQuery,\n  useReplyRequestListStatInReplyRequestTableQuery,\n  ReplyRequestListInReplyRequestTableQuery,\n  ReplyRequestStatusEnum,\n} from '../../types';\n\ntype User = NonNullable<\n  ReplyRequestListInReplyRequestTableQuery['ListReplyRequests']\n>['edges'][number]['node']['user'];\n\ntype UpdatedAt = NonNullable<\n  ReplyRequestListInReplyRequestTableQuery['ListReplyRequests']\n>['edges'][number]['node']['updatedAt'];\n\ntype Article = NonNullable<\n  ReplyRequestListInReplyRequestTableQuery['ListReplyRequests']\n>['edges'][number]['node']['article'];\n\nconst TextCell = styled('div')({\n  width: '100%',\n  overflow: 'hidden',\n  display: '-webkit-box',\n  whiteSpace: 'normal',\n  lineHeight: 1.2,\n  '-webkit-box-orient': 'vertical',\n  '-webkit-line-clamp': 3,\n});\n\nconst COLUMNS: GridColDef[] = [\n  {\n    field: 'author',\n    headerName: 'Author',\n    width: 160,\n    renderCell(params) {\n      const user = params.getValue(params.id, 'user') as User;\n      if (!user) return <div />;\n      return (\n        <RRLink\n          to={`?${getSearchString({\n            workType: WorkType.REPLY_REQUEST,\n            day: 7,\n            userId: user.id,\n            showAll: true,\n          })}`}\n        >\n          {user.name}\n        </RRLink>\n      );\n    },\n  },\n  {\n    field: 'reason',\n    headerName: 'Reason',\n    width: 300,\n    renderCell(params) {\n      const reason = params.value;\n      return <TextCell>{reason}</TextCell>;\n    },\n  },\n  {\n    field: 'article',\n    headerName: 'Article',\n    width: 300,\n    renderCell(params) {\n      const { id, text } = params.value as Article;\n      return (\n        <TextCell>\n          <Link\n            href={`${process.env.REACT_APP_SITE_URL}/article/${id}`}\n            color=\"textPrimary\"\n            variant=\"body2\"\n          >\n            <Typography variant=\"body2\">{text || ''}</Typography>\n          </Link>\n        </TextCell>\n      );\n    },\n  },\n  {\n    field: 'updatedAt',\n    headerName: 'Updated At',\n    width: 200,\n    valueGetter: (params) => {\n      const updatedAt = params.value as UpdatedAt;\n      if (!updatedAt) {\n        return '';\n      }\n\n      return new Date(updatedAt).toLocaleString();\n    },\n  },\n];\n\nconst NORMAL_STATUSES = [ReplyRequestStatusEnum.Normal];\nconst ALL_STATUSES = [\n  ReplyRequestStatusEnum.Normal,\n  ReplyRequestStatusEnum.Blocked,\n];\n\ntype Props = {\n  /** Elasticsearch supported time string */\n  startDate?: string;\n  /** Elasticsearch supported time string */\n  endDate?: string;\n  userId?: string;\n  /** Also shows BLOCKED reply request if true */\n  showAll?: boolean;\n};\n\nconst ReplyTable: React.FC<Props> = ({\n  startDate,\n  endDate,\n  userId,\n  showAll,\n}) => {\n  const createdAtFilter = {\n    GTE: startDate,\n    LTE: endDate,\n  };\n  const statuses = showAll ? ALL_STATUSES : NORMAL_STATUSES;\n\n  const {\n    data: statData,\n    loading: statLoading,\n    error: statError,\n  } = useReplyRequestListStatInReplyRequestTableQuery({\n    variables: { createdAt: createdAtFilter, userId, statuses },\n  });\n  const {\n    data,\n    loading,\n    error,\n    fetchMore,\n  } = useReplyRequestListInReplyRequestTableQuery({\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      pageSize: PAGE_SIZE,\n      createdAt: createdAtFilter,\n      userId,\n      statuses,\n    },\n  });\n\n  if (error) {\n    return <p>Error: {error}</p>;\n  }\n  if (statError) {\n    return <p>Error: {statError}</p>;\n  }\n\n  const edges = data?.ListReplyRequests?.edges || [];\n  return (\n    <DataTable\n      currentlyLoadedRows={edges.map(({ node }) => node)}\n      columns={COLUMNS}\n      rowHeight={64}\n      rowCount={statData?.ListReplyRequests?.totalCount || 0}\n      onNewPageRequest={() =>\n        fetchMore({\n          variables: { after: edges[edges.length - 1].cursor },\n        })\n      }\n      loading={loading || statLoading}\n    />\n  );\n};\n\nexport default ReplyTable;\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport ReplyTable from './ReplyTable';\nimport FeedbackTable from './FeedbackTable';\nimport ReplyRequestTable from './ReplyRequestTable';\nimport { useUrlParams, WorkType } from './util';\n\nconst useStyles = makeStyles((theme) => ({\n  controls: {\n    marginBottom: theme.spacing(2),\n  },\n  controlContent: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: '8px',\n  },\n}));\n\nconst EditorWorks: React.FC = () => {\n  const classes = useStyles();\n  const [param, go] = useUrlParams();\n\n  return (\n    <>\n      <Card classes={{ root: classes.controls }}>\n        <CardContent classes={{ root: classes.controlContent }}>\n          <TextField\n            select\n            value={param.workType}\n            onChange={(e): void => go({ ...param, workType: +e.target.value })}\n          >\n            <MenuItem value={WorkType.REPLY}>Replies</MenuItem>\n            <MenuItem value={WorkType.ARTICLE_REPLY_FEEDBACK}>\n              Feedbacks\n            </MenuItem>\n            <MenuItem value={WorkType.REPLY_REQUEST}>Comments</MenuItem>\n          </TextField>{' '}\n          in the last{' '}\n          <input\n            type=\"number\"\n            defaultValue={param.day}\n            key={param.day /* Recreate when day in URL changes */}\n            onBlur={(e) => go({ ...param, day: +e.target.value })}\n          />{' '}\n          days\n          {param.userId && (\n            <span>\n              for user{' '}\n              <a\n                href={`${process.env.REACT_APP_SITE_URL}/user?id=${param.userId}`}\n              >\n                {param.userId}\n              </a>\n            </span>\n          )}\n          {param.articleReplyUserId &&\n            param.workType === WorkType.ARTICLE_REPLY_FEEDBACK && (\n              <span>\n                for article reply user{' '}\n                <a\n                  href={`${process.env.REACT_APP_SITE_URL}/user?id=${param.articleReplyUserId}`}\n                >\n                  {param.articleReplyUserId}\n                </a>\n              </span>\n            )}\n        </CardContent>\n      </Card>\n      <Paper style={{ height: 700 }}>\n        {param.workType === WorkType.REPLY ? (\n          <ReplyTable startDate={`now-${param.day}d`} userId={param.userId} />\n        ) : param.workType === WorkType.ARTICLE_REPLY_FEEDBACK ? (\n          <FeedbackTable\n            startDate={`now-${param.day}d`}\n            userId={param.userId}\n            articleReplyUserId={param.articleReplyUserId}\n            showAll={param.showAll}\n          />\n        ) : param.workType === WorkType.REPLY_REQUEST ? (\n          <ReplyRequestTable\n            startDate={`now-${param.day}d`}\n            userId={param.userId}\n            showAll={param.showAll}\n          />\n        ) : null}\n      </Paper>\n    </>\n  );\n};\n\nexport default EditorWorks;\n","import EditorWorks from './EditorWorks';\nexport default EditorWorks;\n","type FunNumberSetup = {\n  top?: string;\n  bottom?: string;\n};\n\nconst FUN_NUMBERS: { [num: number]: FunNumberSetup } = {\n  7: {\n    top: 'Lucky',\n  },\n  17: {\n    bottom: '8+9',\n  },\n  21: {\n    top: '每天只有',\n    bottom: '小時，剩下 3 小時是用來睡覺的',\n  },\n  30: {\n    bottom: '而立',\n  },\n  38: {\n    bottom: '婦女節',\n  },\n  40: {\n    bottom: '不惑',\n  },\n  44: {\n    bottom: '隻石獅子',\n  },\n  50: {\n    bottom: '知天命',\n  },\n  56: {\n    bottom: '不能亡',\n  },\n  60: {\n    top: '在非洲每過了',\n    bottom: '秒，就有一分鐘過去',\n  },\n  64: {\n    top: '勿忘',\n  },\n  70: {\n    bottom: '隨心所欲而不踰矩',\n  },\n  77: {\n    top: '森',\n  },\n  87: {\n    bottom: '不能再高了',\n  },\n  92: {\n    top: '沒有共識的',\n    bottom: '共識',\n  },\n  94: {\n    bottom: '狂',\n  },\n  101: {\n    bottom: '大樓',\n  },\n  104: {\n    bottom: '查號台',\n  },\n  113: {\n    top: '衛福部',\n    bottom: '保護專線',\n  },\n  118: {\n    top: '看到',\n    bottom: '就跪了',\n  },\n  123: {\n    bottom: '木頭人',\n  },\n  128: {\n    top: '2的7次方',\n  },\n  144: {\n    top: '12×12=',\n  },\n  165: {\n    top: '警政署',\n    bottom: '反詐騙專線',\n  },\n  183: {\n    bottom: 'CLUB',\n  },\n  193: {\n    bottom: '縣道',\n  },\n  200: {\n    top: '意外撿到',\n    bottom: '元',\n  },\n  228: {\n    bottom: '二二八',\n  },\n  318: {\n    bottom: '學運',\n  },\n  377: {\n    bottom: '森七七',\n  },\n  500: {\n    top: '下去領',\n  },\n};\n\nexport default FUN_NUMBERS;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useQuery, gql } from '@apollo/client';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { isSomeEnum } from '../lib/util';\nimport FUN_NUMBERS from '../lib/funNumbers';\n\nconst MARGIN = 8;\nconst POLLING_INTERVAL = 5000;\n\nexport enum PanelType {\n  replied = 'replied',\n  feedback = 'feedback',\n  comment = 'comment',\n}\n\n/**\n * Setup data for BigNum displays derived from <BigNumSetup>\n */\ntype Setup = {\n  /**\n   * Date to start counting\n   */\n  start: Date;\n\n  /**\n   * What panel(s) to display\n   */\n  panels: PanelType[];\n};\n\nconst PANELS_SETUP = {\n  [PanelType.replied]: {\n    top: '回覆了',\n    bottom: '則訊息',\n    query: gql`\n      query BigNumOfReplied($startTime: String) {\n        query: ListArticles(filter: { repliedAt: { GTE: $startTime } }) {\n          totalCount\n        }\n      }\n    `,\n  },\n  [PanelType.feedback]: {\n    top: '新增了',\n    bottom: '則評價',\n    query: gql`\n      query BigNumOfFeedbacks($startTime: String) {\n        query: ListArticleReplyFeedbacks(\n          filter: { createdAt: { GTE: $startTime }, appId: \"WEBSITE\" }\n        ) {\n          totalCount\n        }\n      }\n    `,\n  },\n  [PanelType.comment]: {\n    top: '新增了',\n    bottom: '則補充',\n    query: gql`\n      query BigNumOfComments($startTime: String) {\n        query: ListReplyRequests(\n          filter: { createdAt: { GTE: $startTime }, appId: \"WEBSITE\" }\n        ) {\n          totalCount\n        }\n      }\n    `,\n  },\n} as const;\n\nconst DISPLAY_SIZE = 768;\n\nconst useStyles = makeStyles({\n  displays: {\n    position: 'fixed',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    display: 'flex',\n    background: '#fff',\n  },\n  resizer: {\n    flex: 1,\n    position: 'relative', // contains resized display & the border\n  },\n  display: {\n    position: 'absolute',\n    width: DISPLAY_SIZE,\n    height: DISPLAY_SIZE,\n    left: '50%',\n    top: '50%',\n    display: 'flex',\n    flexFlow: 'column',\n    justifyContent: 'space-around',\n    textAlign: 'center',\n    '& > p': {\n      margin: 0,\n    },\n  },\n  time: {\n    fontSize: 36,\n    fontWeight: 200,\n  },\n  top: {\n    fontSize: 64,\n    fontWeight: 600,\n  },\n  bottom: {\n    fontSize: 44,\n    fontWeight: 600,\n  },\n  number: {\n    fontSize: 360,\n    lineHeight: 1,\n    fontWeight: 400,\n  },\n  funNumber: {\n    fontSize: 360,\n    fontWeight: 100,\n  },\n  funParagraph: {\n    fontSize: 84,\n    fontWeight: 600,\n  },\n  border: {\n    position: 'absolute',\n    border: '8px solid rgba(0,0,0,0.64)',\n    top: 24,\n    right: 24,\n    bottom: 24,\n    left: 24,\n  },\n});\n\ntype BigNumDisplayProps = {\n  rootProps: JSX.IntrinsicElements['div'];\n  start: Setup['start'];\n  panelType: PanelType;\n};\n\nconst BigNumDisplay: React.FC<BigNumDisplayProps> = ({\n  rootProps,\n  start,\n  panelType,\n}) => {\n  const classes = useStyles();\n  const { top, bottom, query } = PANELS_SETUP[panelType];\n\n  const { data, loading, error } = useQuery(query, {\n    pollInterval: POLLING_INTERVAL,\n    variables: { startTime: start.toISOString() },\n  });\n\n  if (loading) {\n    return <div {...rootProps}>Loading</div>;\n  }\n\n  if (error) {\n    return <div {...rootProps}>{error.toString()}</div>;\n  }\n\n  const number = data.query?.totalCount as number | null;\n  const numberStr = number === null ? '' : number.toString();\n\n  if (number && number in FUN_NUMBERS) {\n    const { top, bottom } = FUN_NUMBERS[number];\n    return (\n      <>\n        <div {...rootProps}>\n          {top && <p className={classes.funParagraph}>{top}</p>}\n          <p className={classes.funNumber}>{numberStr}</p>\n          {bottom && <p className={classes.funParagraph}>{bottom}</p>}\n        </div>\n        <div className={classes.border} />\n      </>\n    );\n  }\n\n  return (\n    <div {...rootProps}>\n      <p className={classes.time}>自 {start.toLocaleString()} 起</p>\n      <p className={classes.top}>{top}</p>\n      <p className={classes.number}>{numberStr}</p>\n      <p className={classes.bottom}>{bottom}</p>\n    </div>\n  );\n};\n\ntype ResizerProp = {\n  children: (props: JSX.IntrinsicElements['div']) => JSX.Element;\n};\n\nconst Resizer: React.FC<ResizerProp> = ({ children }) => {\n  const classes = useStyles();\n  const [scale, setScale] = useState(1);\n  const resizerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    function resize() {\n      if (resizerRef.current === null) return;\n      const { width, height } = resizerRef.current.getBoundingClientRect();\n      const horizontalScale = Math.max(width - MARGIN, 0) / DISPLAY_SIZE;\n      const verticalScale = Math.max(height - MARGIN, 0) / DISPLAY_SIZE;\n\n      setScale(Math.min(horizontalScale, verticalScale));\n    }\n    window.addEventListener('resize', resize);\n    resize();\n\n    return () => {\n      window.removeEventListener('resize', resize);\n    };\n  }, []);\n\n  return (\n    <div className={classes.resizer} ref={resizerRef}>\n      {children({\n        className: classes.display,\n        style: { transform: `translate(-50%, -50%) scale(${scale})` },\n      })}\n    </div>\n  );\n};\n\nconst BigNum: React.FC = () => {\n  const { search } = useLocation();\n  const classes = useStyles();\n\n  const searchParams = new URLSearchParams(search);\n  const startParam = searchParams.get('start');\n  const panelsParms = searchParams.getAll('panels');\n  const startDate = startParam ? new Date(startParam) : new Date();\n\n  const panels = panelsParms.map((param) => {\n    if (!isSomeEnum(PanelType)(param)) {\n      throw new Error('panels must be one of PanelType.');\n    }\n    return PanelType[param];\n  });\n\n  return (\n    <div className={classes.displays}>\n      {panels.map((panelType) => (\n        <Resizer key={panelType}>\n          {(props) => (\n            <BigNumDisplay\n              rootProps={props}\n              panelType={panelType}\n              start={startDate}\n            />\n          )}\n        </Resizer>\n      ))}\n    </div>\n  );\n};\n\nexport default BigNum;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport { PanelType } from './BigNum';\n\nconst useStyles = makeStyles((theme) => ({\n  setup: {\n    margin: `${theme.spacing(2)}px auto`,\n  },\n  panelsetup: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nconst BigNumSetup: React.FC = () => {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const query = new URLSearchParams(\n      // FIXME: bug in URLSearchParams type (https://github.com/Microsoft/TypeScript/issues/30584)\n      // @ts-ignore\n      new FormData(e.target)\n    ).toString();\n\n    history.push('/bignum?' + query);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Card classes={{ root: classes.setup }}>\n        <CardContent>\n          <Typography variant=\"h4\" gutterBottom>\n            Display settings\n          </Typography>\n          <TextField\n            name=\"start\"\n            label=\"Time to start counting\"\n            type=\"datetime-local\"\n            InputLabelProps={{ shrink: true }}\n          />\n          <FormLabel component=\"legend\" classes={{ root: classes.panelsetup }}>\n            Numbers to show\n          </FormLabel>\n          <FormGroup>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"panels\"\n                  value={PanelType.feedback}\n                  defaultChecked\n                />\n              }\n              label=\"Feedbacks\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"panels\"\n                  value={PanelType.comment}\n                  defaultChecked\n                />\n              }\n              label=\"Comments\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"panels\"\n                  value={PanelType.replied}\n                  defaultChecked\n                />\n              }\n              label=\"Replied articles\"\n            />\n          </FormGroup>\n        </CardContent>\n        <CardActions>\n          <Button color=\"primary\" type=\"submit\">\n            Start\n          </Button>\n        </CardActions>\n      </Card>\n    </form>\n  );\n};\n\nexport default BigNumSetup;\n","import React from 'react';\nimport { Route, Switch, Link } from 'react-router-dom';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport Home from './pages/Home';\nimport APIStats from './pages/APIStats';\nimport NeedToCheckSetup from './pages/NeedToCheckSetup';\nimport NeedToCheck from './pages/NeedToCheck';\nimport EditorWorks from './pages/EditorWorks';\nimport BigNumSetup from './pages/BigNumSetup';\nimport BigNum from './pages/BigNum';\n\nconst useStyles = makeStyles((theme) => ({\n  titleLink: {\n    color: 'inherit',\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  },\n  gridContainer: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <AppBar color=\"secondary\" position=\"static\">\n        <Toolbar>\n          <Link to=\"/\" className={classes.titleLink}>\n            <Typography variant=\"h6\">Cofacts Community Builder</Typography>\n          </Link>\n        </Toolbar>\n      </AppBar>\n      <Container classes={{ root: classes.gridContainer }} maxWidth=\"lg\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/stats\">\n            <APIStats />\n          </Route>\n          <Route path=\"/need-to-check/setup\">\n            <NeedToCheckSetup />\n          </Route>\n          <Route path=\"/need-to-check\">\n            <NeedToCheck />\n          </Route>\n          <Route path=\"/editorworks\">\n            <EditorWorks />\n          </Route>\n          <Route path=\"/bignum/setup\">\n            <BigNumSetup />\n          </Route>\n          <Route path=\"/bignum\">\n            <BigNum />\n          </Route>\n        </Switch>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport { ApolloProvider } from '@apollo/client';\nimport { HashRouter as Router } from 'react-router-dom';\nimport client from './lib/apollo';\nimport theme from './lib/theme';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <ApolloProvider client={client}>\n        <Router>\n          <App />\n        </Router>\n      </ApolloProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}