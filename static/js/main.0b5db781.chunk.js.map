{"version":3,"sources":["types.tsx","lib/apollo.ts","lib/theme.ts","pages/Home.tsx","lib/util.ts","pages/NeedToCheck.tsx","pages/APIStats.tsx","pages/NeedToCheckSetup.tsx","pages/EditorWorks.tsx","lib/funNumbers.ts","pages/BigNum.tsx","pages/BigNumSetup.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ArticleReferenceTypeEnum","ReplyTypeEnum","ArticleReplyStatusEnum","SortOrderEnum","FeedbackVote","ArticleCategoryStatusEnum","client","ApolloClient","link","ApolloLink","from","BatchHttpLink","uri","process","headers","cache","InMemoryCache","theme","createMuiTheme","palette","primary","main","50","100","200","300","400","500","600","700","800","900","light","dark","secondary","error","red","A400","background","default","typography","fontFamily","useStyles","makeStyles","textDecoration","FunctionButton","to","title","description","classes","Grid","item","xs","sm","className","Card","CardActionArea","CardContent","Typography","variant","gutterBottom","Home","container","spacing","LoadApiStatsDocument","gql","ListRepliesDocument","getThousandSep","num","toString","replace","SortOrder","StatItem","name","value","APIStats","baseOptions","pollInterval","Apollo","data","loading","align","component","CircularProgress","size","allArticles","totalCount","allRepliedArticles","articlesHasUsefulReplies","NeedToCheckSetup","NeedToCheck","search","useLocation","searchParams","URLSearchParams","get","Pagination","pageInfo","edges","firstCursor","lastCursor","firstCursorOfPage","length","cursor","lastCursorOfPage","pathname","stringify","before","after","undefined","EditorWorks","beforeParam","afterParam","variables","ListReplies","map","node","key","id","href","text","user","createdAt","colSpan","FUN_NUMBERS","7","top","17","bottom","21","30","38","40","44","56","60","64","70","77","87","92","94","101","104","113","118","123","128","144","165","183","193","228","318","377","PanelType","PANELS_SETUP","replied","query","feedback","displays","position","right","left","display","resizer","flex","width","height","flexFlow","justifyContent","textAlign","margin","time","fontSize","fontWeight","number","lineHeight","funNumber","funParagraph","border","BigNumDisplay","rootProps","start","panelType","useQuery","startTime","toISOString","numberStr","toLocaleString","Resizer","children","useState","scale","setScale","resizerRef","useRef","useEffect","resize","current","getBoundingClientRect","horizontalScale","Math","max","verticalScale","min","window","addEventListener","removeEventListener","ref","style","transform","BigNum","startParam","panelsParms","getAll","startDate","Date","panels","param","e","token","Object","values","includes","Error","props","setup","panelsetup","marginTop","marginBottom","BigNumSetup","history","useHistory","onSubmit","preventDefault","FormData","target","push","root","TextField","label","type","InputLabelProps","shrink","FormLabel","FormGroup","FormControlLabel","control","Checkbox","defaultChecked","CardActions","Button","color","titleLink","gridContainer","App","AppBar","Toolbar","Container","maxWidth","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0b5db781.chunk.js","sourcesContent":["/* eslint-disable */\n/* AUTO-GENERATED. WILL BE OVERWRITTEN BY `npm run codegen`. */\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  readonly __typename?: 'Query';\n  readonly GetArticle?: Maybe<Article>;\n  readonly GetReply?: Maybe<Reply>;\n  /**\n   * Gets specified user. If id is not given, returns the currently logged-in user.\n   * Note that some fields like email is not visible to other users.\n   */\n  readonly GetUser?: Maybe<User>;\n  readonly GetCategory?: Maybe<Category>;\n  readonly ListArticles?: Maybe<ArticleConnection>;\n  readonly ListReplies?: Maybe<ReplyConnection>;\n  readonly ListCategories?: Maybe<ListCategoryConnection>;\n  readonly ListArticleReplyFeedbacks?: Maybe<ListArticleReplyFeedbackConnection>;\n};\n\n\nexport type QueryGetArticleArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryGetReplyArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryGetUserArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryGetCategoryArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryListArticlesArgs = {\n  filter?: Maybe<ListArticleFilter>;\n  orderBy?: Maybe<ReadonlyArray<Maybe<ListArticleOrderBy>>>;\n  first?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryListRepliesArgs = {\n  filter?: Maybe<ListReplyFilter>;\n  orderBy?: Maybe<ReadonlyArray<Maybe<ListReplyOrderBy>>>;\n  first?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryListCategoriesArgs = {\n  orderBy?: Maybe<ReadonlyArray<Maybe<ListCategoryOrderBy>>>;\n  first?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryListArticleReplyFeedbacksArgs = {\n  filter?: Maybe<ListArticleReplyFeedbackFilter>;\n  orderBy?: Maybe<ReadonlyArray<Maybe<ListArticleReplyFeedbackOrderBy>>>;\n  first?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n};\n\nexport type Article = Node & {\n  readonly __typename?: 'Article';\n  readonly id: Scalars['ID'];\n  readonly text?: Maybe<Scalars['String']>;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly updatedAt?: Maybe<Scalars['String']>;\n  readonly references?: Maybe<ReadonlyArray<Maybe<ArticleReference>>>;\n  /** Number of normal article replies */\n  readonly replyCount?: Maybe<Scalars['Int']>;\n  /** Connections between this article and replies. Sorted by the logic described in https://github.com/cofacts/rumors-line-bot/issues/78. */\n  readonly articleReplies?: Maybe<ReadonlyArray<Maybe<ArticleReply>>>;\n  readonly articleCategories?: Maybe<ReadonlyArray<Maybe<ArticleCategory>>>;\n  /** Number of normal article categories */\n  readonly categoryCount?: Maybe<Scalars['Int']>;\n  readonly replyRequests?: Maybe<ReadonlyArray<Maybe<ReplyRequest>>>;\n  readonly replyRequestCount?: Maybe<Scalars['Int']>;\n  readonly lastRequestedAt?: Maybe<Scalars['String']>;\n  /** If the current user has requested for reply for this article. Null if not logged in. */\n  readonly requestedForReply?: Maybe<Scalars['Boolean']>;\n  /** The user submitted this article */\n  readonly user?: Maybe<User>;\n  readonly relatedArticles?: Maybe<ArticleConnection>;\n  /** Hyperlinks in article text */\n  readonly hyperlinks?: Maybe<ReadonlyArray<Maybe<Hyperlink>>>;\n  /** Activities analytics for the given article */\n  readonly stats?: Maybe<ReadonlyArray<Maybe<Analytics>>>;\n};\n\n\nexport type ArticleArticleRepliesArgs = {\n  status?: Maybe<ArticleReplyStatusEnum>;\n};\n\n\nexport type ArticleArticleCategoriesArgs = {\n  status?: Maybe<ArticleCategoryStatusEnum>;\n};\n\n\nexport type ArticleRelatedArticlesArgs = {\n  filter?: Maybe<RelatedArticleFilter>;\n  orderBy?: Maybe<ReadonlyArray<Maybe<RelatedArticleOrderBy>>>;\n  first?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n};\n\n\nexport type ArticleStatsArgs = {\n  dateRange?: Maybe<TimeRangeInput>;\n};\n\n/** Basic entity. Modeled after Relay's GraphQL Server Specification. */\nexport type Node = {\n  readonly id: Scalars['ID'];\n};\n\nexport type ArticleReference = {\n  readonly __typename?: 'ArticleReference';\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly type?: Maybe<ArticleReferenceTypeEnum>;\n  readonly permalink?: Maybe<Scalars['String']>;\n};\n\n/** Where this article is collected from. */\nexport enum ArticleReferenceTypeEnum {\n  /** The article is collected from the Internet, with a link to the article available. */\n  Url = 'URL',\n  /** The article is collected from conversations in LINE messengers. */\n  Line = 'LINE'\n}\n\n/** The linkage between an Article and a Reply */\nexport type ArticleReply = {\n  readonly __typename?: 'ArticleReply';\n  readonly replyId?: Maybe<Scalars['String']>;\n  readonly reply?: Maybe<Reply>;\n  /** Cached reply type value stored in ArticleReply */\n  readonly replyType?: Maybe<ReplyTypeEnum>;\n  readonly articleId?: Maybe<Scalars['String']>;\n  readonly article?: Maybe<Article>;\n  /** The user who conencted this reply and this article. */\n  readonly user?: Maybe<User>;\n  readonly canUpdateStatus?: Maybe<Scalars['Boolean']>;\n  readonly feedbackCount?: Maybe<Scalars['Int']>;\n  readonly positiveFeedbackCount?: Maybe<Scalars['Int']>;\n  readonly negativeFeedbackCount?: Maybe<Scalars['Int']>;\n  readonly feedbacks?: Maybe<ReadonlyArray<Maybe<ArticleReplyFeedback>>>;\n  /** The feedback of current user. null when not logged in or not voted yet. */\n  readonly ownVote?: Maybe<FeedbackVote>;\n  readonly status?: Maybe<ArticleReplyStatusEnum>;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly updatedAt?: Maybe<Scalars['String']>;\n};\n\nexport type Reply = Node & {\n  readonly __typename?: 'Reply';\n  readonly id: Scalars['ID'];\n  /** The user submitted this reply version */\n  readonly user?: Maybe<User>;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly text?: Maybe<Scalars['String']>;\n  readonly type?: Maybe<ReplyTypeEnum>;\n  readonly reference?: Maybe<Scalars['String']>;\n  readonly articleReplies?: Maybe<ReadonlyArray<Maybe<ArticleReply>>>;\n  /** Hyperlinks in reply text or reference. May be empty array if no URLs are included. `null` when hyperlinks are still fetching. */\n  readonly hyperlinks?: Maybe<ReadonlyArray<Maybe<Hyperlink>>>;\n  /** Replies that has similar text or references of this current reply */\n  readonly similarReplies?: Maybe<ReplyConnection>;\n};\n\n\nexport type ReplyArticleRepliesArgs = {\n  status?: Maybe<ArticleReplyStatusEnum>;\n};\n\n\nexport type ReplySimilarRepliesArgs = {\n  orderBy?: Maybe<ReadonlyArray<Maybe<SimilarReplyOrderBy>>>;\n  first?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n};\n\nexport type User = {\n  readonly __typename?: 'User';\n  readonly id?: Maybe<Scalars['String']>;\n  /** Returns only for current user. Returns `null` otherwise. */\n  readonly email?: Maybe<Scalars['String']>;\n  readonly name?: Maybe<Scalars['String']>;\n  /** return hash based on user email for gravatar url */\n  readonly avatarUrl?: Maybe<Scalars['String']>;\n  /** Returns only for current user. Returns `null` otherwise. */\n  readonly facebookId?: Maybe<Scalars['String']>;\n  /** Returns only for current user. Returns `null` otherwise. */\n  readonly githubId?: Maybe<Scalars['String']>;\n  /** Returns only for current user. Returns `null` otherwise. */\n  readonly twitterId?: Maybe<Scalars['String']>;\n  /** Number of articles this user has replied to */\n  readonly repliedArticleCount: Scalars['Int'];\n  /** Number of article replies this user has given feedbacks */\n  readonly votedArticleReplyCount: Scalars['Int'];\n  readonly level: Scalars['Int'];\n  readonly points: PointInfo;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly updatedAt?: Maybe<Scalars['String']>;\n};\n\n/** Information of a user's point. Only available for current user. */\nexport type PointInfo = {\n  readonly __typename?: 'PointInfo';\n  /** Points earned by the current user */\n  readonly total: Scalars['Int'];\n  /** Points required for current level */\n  readonly currentLevel: Scalars['Int'];\n  /** Points required for next level. null when there is no next level. */\n  readonly nextLevel: Scalars['Int'];\n};\n\n/** Reflects how the replier categories the replied article. */\nexport enum ReplyTypeEnum {\n  /** The replier thinks that the article contains false information. */\n  Rumor = 'RUMOR',\n  /** The replier thinks that the articles contains no false information. */\n  NotRumor = 'NOT_RUMOR',\n  /** The replier thinks that the article is actually not a complete article on the internet or passed around in messengers. */\n  NotArticle = 'NOT_ARTICLE',\n  /** The replier thinks that the article contains personal viewpoint and is not objective. */\n  Opinionated = 'OPINIONATED'\n}\n\nexport enum ArticleReplyStatusEnum {\n  Normal = 'NORMAL',\n  Deleted = 'DELETED'\n}\n\n/** Data behind a hyperlink */\nexport type Hyperlink = {\n  readonly __typename?: 'Hyperlink';\n  /** URL in text */\n  readonly url?: Maybe<Scalars['String']>;\n  /** URL normalized by scrapUrl */\n  readonly normalizedUrl?: Maybe<Scalars['String']>;\n  readonly title?: Maybe<Scalars['String']>;\n  readonly summary?: Maybe<Scalars['String']>;\n  readonly topImageUrl?: Maybe<Scalars['String']>;\n  readonly fetchedAt?: Maybe<Scalars['String']>;\n  readonly status?: Maybe<Scalars['String']>;\n  readonly error?: Maybe<Scalars['String']>;\n};\n\nexport type ReplyConnection = Connection & {\n  readonly __typename?: 'ReplyConnection';\n  /** The total count of the entire collection, regardless of \"before\", \"after\". */\n  readonly totalCount: Scalars['Int'];\n  readonly edges: ReadonlyArray<ReplyConnectionEdge>;\n  readonly pageInfo: ReplyConnectionPageInfo;\n};\n\n/** Connection model for a list of nodes. Modeled after Relay's GraphQL Server Specification. */\nexport type Connection = {\n  readonly edges: ReadonlyArray<Edge>;\n  readonly totalCount: Scalars['Int'];\n  readonly pageInfo: PageInfo;\n};\n\n/** Edge in Connection. Modeled after GraphQL connection model. */\nexport type Edge = {\n  readonly node: Node;\n  readonly cursor: Scalars['String'];\n};\n\n/** PageInfo in Connection. Modeled after GraphQL connection model. */\nexport type PageInfo = {\n  /** The cursor pointing to the first node of the entire collection, regardless of \"before\" and \"after\". Can be used to determine if is in the last page. Null when the collection is empty. */\n  readonly firstCursor?: Maybe<Scalars['String']>;\n  /** The cursor pointing to the last node of the entire collection, regardless of \"before\" and \"after\". Can be used to determine if is in the last page. Null when the collection is empty. */\n  readonly lastCursor?: Maybe<Scalars['String']>;\n};\n\nexport type ReplyConnectionEdge = Edge & {\n  readonly __typename?: 'ReplyConnectionEdge';\n  readonly node: Reply;\n  readonly cursor: Scalars['String'];\n  readonly score?: Maybe<Scalars['Float']>;\n  readonly highlight?: Maybe<Highlights>;\n};\n\nexport type Highlights = {\n  readonly __typename?: 'Highlights';\n  /** Article or Reply text */\n  readonly text?: Maybe<Scalars['String']>;\n  /** Reply reference */\n  readonly reference?: Maybe<Scalars['String']>;\n  /** Article or Reply hyperlinks */\n  readonly hyperlinks?: Maybe<ReadonlyArray<Maybe<Hyperlink>>>;\n};\n\nexport type ReplyConnectionPageInfo = PageInfo & {\n  readonly __typename?: 'ReplyConnectionPageInfo';\n  readonly lastCursor?: Maybe<Scalars['String']>;\n  readonly firstCursor?: Maybe<Scalars['String']>;\n};\n\n/** An entry of orderBy argument. Specifies field name and the sort order. Only one field name is allowd per entry. */\nexport type SimilarReplyOrderBy = {\n  readonly _score?: Maybe<SortOrderEnum>;\n  readonly createdAt?: Maybe<SortOrderEnum>;\n};\n\nexport enum SortOrderEnum {\n  Asc = 'ASC',\n  Desc = 'DESC'\n}\n\n/** User feedback to an ArticleReply */\nexport type ArticleReplyFeedback = Node & {\n  readonly __typename?: 'ArticleReplyFeedback';\n  readonly id: Scalars['ID'];\n  readonly user?: Maybe<User>;\n  readonly userId?: Maybe<Scalars['String']>;\n  readonly appId?: Maybe<Scalars['String']>;\n  readonly comment?: Maybe<Scalars['String']>;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly updatedAt?: Maybe<Scalars['String']>;\n  /** User's vote on the articleReply */\n  readonly vote?: Maybe<FeedbackVote>;\n  /**\n   * One of 1, 0 and -1. Representing upvote, neutral and downvote, respectively\n   * @deprecated Use vote instead\n   */\n  readonly score?: Maybe<Scalars['Int']>;\n  /** The scored article-reply's article */\n  readonly article?: Maybe<Article>;\n  /** The scored article-reply's reply */\n  readonly reply?: Maybe<Reply>;\n  /** The scored article-reply */\n  readonly articleReply?: Maybe<ArticleReply>;\n};\n\nexport enum FeedbackVote {\n  Upvote = 'UPVOTE',\n  Neutral = 'NEUTRAL',\n  Downvote = 'DOWNVOTE'\n}\n\n/** The linkage between an Article and a Category */\nexport type ArticleCategory = Node & {\n  readonly __typename?: 'ArticleCategory';\n  readonly id: Scalars['ID'];\n  readonly categoryId?: Maybe<Scalars['String']>;\n  readonly category?: Maybe<Category>;\n  readonly articleId?: Maybe<Scalars['String']>;\n  readonly article?: Maybe<Article>;\n  /** The user who updated this category with this article. */\n  readonly user?: Maybe<User>;\n  readonly canUpdateStatus?: Maybe<Scalars['Boolean']>;\n  readonly feedbackCount?: Maybe<Scalars['Int']>;\n  readonly positiveFeedbackCount?: Maybe<Scalars['Int']>;\n  readonly negativeFeedbackCount?: Maybe<Scalars['Int']>;\n  readonly feedbacks?: Maybe<ReadonlyArray<Maybe<ArticleCategoryFeedback>>>;\n  /** The feedback of current user. null when not logged in or not voted yet. */\n  readonly ownVote?: Maybe<FeedbackVote>;\n  readonly status?: Maybe<ArticleCategoryStatusEnum>;\n  readonly aiModel?: Maybe<Scalars['String']>;\n  readonly aiConfidence?: Maybe<Scalars['Float']>;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly updatedAt?: Maybe<Scalars['String']>;\n};\n\n/** Category label for specific topic */\nexport type Category = Node & {\n  readonly __typename?: 'Category';\n  readonly id: Scalars['ID'];\n  readonly title?: Maybe<Scalars['String']>;\n  readonly description?: Maybe<Scalars['String']>;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly updatedAt?: Maybe<Scalars['String']>;\n  readonly articleCategories?: Maybe<ArticleCategoryConnection>;\n};\n\n\n/** Category label for specific topic */\nexport type CategoryArticleCategoriesArgs = {\n  status?: Maybe<ArticleCategoryStatusEnum>;\n  orderBy?: Maybe<ReadonlyArray<Maybe<CategoryArticleCategoriesOrderBy>>>;\n  first?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n};\n\nexport type ArticleCategoryConnection = Connection & {\n  readonly __typename?: 'ArticleCategoryConnection';\n  /** The total count of the entire collection, regardless of \"before\", \"after\". */\n  readonly totalCount: Scalars['Int'];\n  readonly edges: ReadonlyArray<ArticleCategoryConnectionEdge>;\n  readonly pageInfo: ArticleCategoryConnectionPageInfo;\n};\n\nexport type ArticleCategoryConnectionEdge = Edge & {\n  readonly __typename?: 'ArticleCategoryConnectionEdge';\n  readonly node: ArticleCategory;\n  readonly cursor: Scalars['String'];\n  readonly score?: Maybe<Scalars['Float']>;\n  readonly highlight?: Maybe<Highlights>;\n};\n\nexport type ArticleCategoryConnectionPageInfo = PageInfo & {\n  readonly __typename?: 'ArticleCategoryConnectionPageInfo';\n  readonly lastCursor?: Maybe<Scalars['String']>;\n  readonly firstCursor?: Maybe<Scalars['String']>;\n};\n\nexport enum ArticleCategoryStatusEnum {\n  Normal = 'NORMAL',\n  Deleted = 'DELETED'\n}\n\n/** An entry of orderBy argument. Specifies field name and the sort order. Only one field name is allowd per entry. */\nexport type CategoryArticleCategoriesOrderBy = {\n  readonly createdAt?: Maybe<SortOrderEnum>;\n};\n\n/** User feedback to an ArticleCategory */\nexport type ArticleCategoryFeedback = {\n  readonly __typename?: 'ArticleCategoryFeedback';\n  readonly id?: Maybe<Scalars['String']>;\n  readonly user?: Maybe<User>;\n  readonly comment?: Maybe<Scalars['String']>;\n  /** User's vote on the articleCategory */\n  readonly vote?: Maybe<FeedbackVote>;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly updatedAt?: Maybe<Scalars['String']>;\n};\n\nexport type ReplyRequest = {\n  readonly __typename?: 'ReplyRequest';\n  readonly id?: Maybe<Scalars['String']>;\n  readonly userId?: Maybe<Scalars['String']>;\n  readonly appId?: Maybe<Scalars['String']>;\n  readonly reason?: Maybe<Scalars['String']>;\n  readonly feedbackCount?: Maybe<Scalars['Int']>;\n  readonly positiveFeedbackCount?: Maybe<Scalars['Int']>;\n  readonly negativeFeedbackCount?: Maybe<Scalars['Int']>;\n  readonly createdAt?: Maybe<Scalars['String']>;\n  readonly updatedAt?: Maybe<Scalars['String']>;\n  /** The feedback of current user. null when not logged in or not voted yet. */\n  readonly ownVote?: Maybe<FeedbackVote>;\n};\n\nexport type ArticleConnection = Connection & {\n  readonly __typename?: 'ArticleConnection';\n  /** The total count of the entire collection, regardless of \"before\", \"after\". */\n  readonly totalCount: Scalars['Int'];\n  readonly edges: ReadonlyArray<ArticleConnectionEdge>;\n  readonly pageInfo: ArticleConnectionPageInfo;\n};\n\nexport type ArticleConnectionEdge = Edge & {\n  readonly __typename?: 'ArticleConnectionEdge';\n  readonly node: Article;\n  readonly cursor: Scalars['String'];\n  readonly score?: Maybe<Scalars['Float']>;\n  readonly highlight?: Maybe<Highlights>;\n};\n\nexport type ArticleConnectionPageInfo = PageInfo & {\n  readonly __typename?: 'ArticleConnectionPageInfo';\n  readonly lastCursor?: Maybe<Scalars['String']>;\n  readonly firstCursor?: Maybe<Scalars['String']>;\n};\n\nexport type RelatedArticleFilter = {\n  readonly replyCount?: Maybe<RangeInput>;\n};\n\n/** List only the entries whose field match the criteria. */\nexport type RangeInput = {\n  readonly LT?: Maybe<Scalars['Int']>;\n  readonly LTE?: Maybe<Scalars['Int']>;\n  readonly GT?: Maybe<Scalars['Int']>;\n  readonly GTE?: Maybe<Scalars['Int']>;\n  readonly EQ?: Maybe<Scalars['Int']>;\n};\n\n/** An entry of orderBy argument. Specifies field name and the sort order. Only one field name is allowd per entry. */\nexport type RelatedArticleOrderBy = {\n  readonly _score?: Maybe<SortOrderEnum>;\n  readonly updatedAt?: Maybe<SortOrderEnum>;\n};\n\nexport type Analytics = {\n  readonly __typename?: 'Analytics';\n  readonly date?: Maybe<Scalars['String']>;\n  readonly lineUser?: Maybe<Scalars['Int']>;\n  readonly lineVisit?: Maybe<Scalars['Int']>;\n  readonly webUser?: Maybe<Scalars['Int']>;\n  readonly webVisit?: Maybe<Scalars['Int']>;\n};\n\n/** List only the entries that were created between the specific time range. The time range value is in elasticsearch date format (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html) */\nexport type TimeRangeInput = {\n  readonly LT?: Maybe<Scalars['String']>;\n  readonly LTE?: Maybe<Scalars['String']>;\n  readonly GT?: Maybe<Scalars['String']>;\n  readonly GTE?: Maybe<Scalars['String']>;\n  readonly EQ?: Maybe<Scalars['String']>;\n};\n\nexport type ListArticleFilter = {\n  /** List only the articles whose number of replies matches the criteria. */\n  readonly replyCount?: Maybe<RangeInput>;\n  /** List only the articles whose number of categories match the criteria. */\n  readonly categoryCount?: Maybe<RangeInput>;\n  /** List only articles that match any of the specified categories.ArticleCategories that are deleted or has more negative feedbacks than positive ones are not taken into account. */\n  readonly categoryIds?: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;\n  /** List all articles related to a given string. */\n  readonly moreLikeThis?: Maybe<MoreLikeThisInput>;\n  /** List only the articles whose number of replies matches the criteria. */\n  readonly replyRequestCount?: Maybe<RangeInput>;\n  /** List only the articles that were created between the specific time range. */\n  readonly createdAt?: Maybe<TimeRangeInput>;\n  /** List only the articles that were replied between the specific time range. */\n  readonly repliedAt?: Maybe<TimeRangeInput>;\n  /** Show only articles from a specific user. */\n  readonly appId?: Maybe<Scalars['String']>;\n  /** Show only articles from a specific user. */\n  readonly userId?: Maybe<Scalars['String']>;\n  /**\n   * Specify an articleId here to show only articles from the sender of that specified article.\n   * When specified, it overrides the settings of appId and userId.\n   */\n  readonly fromUserOfArticleId?: Maybe<Scalars['String']>;\n  /** Show only articles with(out) article replies created by specified user */\n  readonly articleRepliesFrom?: Maybe<UserAndExistInput>;\n  /**\n   * When true, return only articles with any article replies that has more positive feedback than negative.\n   * When false, return articles with none of its article replies that has more positive feedback, including those with no replies yet.\n   * In both scenario, deleted article replies are not taken into account.\n   */\n  readonly hasArticleReplyWithMorePositiveFeedback?: Maybe<Scalars['Boolean']>;\n  /** List the articles with replies of certain types */\n  readonly replyTypes?: Maybe<ReadonlyArray<Maybe<ReplyTypeEnum>>>;\n};\n\n/**\n * Parameters for Elasticsearch more_like_this query.\n * See: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html\n */\nexport type MoreLikeThisInput = {\n  /** The text string to search for. */\n  readonly like?: Maybe<Scalars['String']>;\n  /**\n   * more_like_this query's \"minimum_should_match\" query param.\n   * See https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-minimum-should-match.html for possible values.\n   */\n  readonly minimumShouldMatch?: Maybe<Scalars['String']>;\n};\n\nexport type UserAndExistInput = {\n  readonly userId: Scalars['String'];\n  /**\n   * When true (or not specified), return only entries with the specified user's involvement.\n   * When false, return only entries that the specified user did not involve.\n   */\n  readonly exists?: Maybe<Scalars['Boolean']>;\n};\n\n/** An entry of orderBy argument. Specifies field name and the sort order. Only one field name is allowd per entry. */\nexport type ListArticleOrderBy = {\n  readonly _score?: Maybe<SortOrderEnum>;\n  readonly updatedAt?: Maybe<SortOrderEnum>;\n  readonly createdAt?: Maybe<SortOrderEnum>;\n  readonly replyRequestCount?: Maybe<SortOrderEnum>;\n  readonly replyCount?: Maybe<SortOrderEnum>;\n  readonly lastRequestedAt?: Maybe<SortOrderEnum>;\n  readonly lastRepliedAt?: Maybe<SortOrderEnum>;\n};\n\nexport type ListReplyFilter = {\n  readonly userId?: Maybe<Scalars['String']>;\n  readonly appId?: Maybe<Scalars['String']>;\n  readonly moreLikeThis?: Maybe<MoreLikeThisInput>;\n  /** List the replies created by the requester themselves */\n  readonly selfOnly?: Maybe<Scalars['Boolean']>;\n  /** [Deprecated] use types instead. */\n  readonly type?: Maybe<ReplyTypeEnum>;\n  /** List the replies of certain types */\n  readonly types?: Maybe<ReadonlyArray<Maybe<ReplyTypeEnum>>>;\n  /** List only the replies that were created between the specific time range. */\n  readonly createdAt?: Maybe<TimeRangeInput>;\n};\n\n/** An entry of orderBy argument. Specifies field name and the sort order. Only one field name is allowd per entry. */\nexport type ListReplyOrderBy = {\n  readonly _score?: Maybe<SortOrderEnum>;\n  readonly createdAt?: Maybe<SortOrderEnum>;\n};\n\nexport type ListCategoryConnection = Connection & {\n  readonly __typename?: 'ListCategoryConnection';\n  /** The total count of the entire collection, regardless of \"before\", \"after\". */\n  readonly totalCount: Scalars['Int'];\n  readonly edges: ReadonlyArray<ListCategoryConnectionEdge>;\n  readonly pageInfo: ListCategoryConnectionPageInfo;\n};\n\nexport type ListCategoryConnectionEdge = Edge & {\n  readonly __typename?: 'ListCategoryConnectionEdge';\n  readonly node: Category;\n  readonly cursor: Scalars['String'];\n  readonly score?: Maybe<Scalars['Float']>;\n  readonly highlight?: Maybe<Highlights>;\n};\n\nexport type ListCategoryConnectionPageInfo = PageInfo & {\n  readonly __typename?: 'ListCategoryConnectionPageInfo';\n  readonly lastCursor?: Maybe<Scalars['String']>;\n  readonly firstCursor?: Maybe<Scalars['String']>;\n};\n\n/** An entry of orderBy argument. Specifies field name and the sort order. Only one field name is allowd per entry. */\nexport type ListCategoryOrderBy = {\n  readonly createdAt?: Maybe<SortOrderEnum>;\n};\n\nexport type ListArticleReplyFeedbackConnection = Connection & {\n  readonly __typename?: 'ListArticleReplyFeedbackConnection';\n  /** The total count of the entire collection, regardless of \"before\", \"after\". */\n  readonly totalCount: Scalars['Int'];\n  readonly edges: ReadonlyArray<ListArticleReplyFeedbackConnectionEdge>;\n  readonly pageInfo: ListArticleReplyFeedbackConnectionPageInfo;\n};\n\nexport type ListArticleReplyFeedbackConnectionEdge = Edge & {\n  readonly __typename?: 'ListArticleReplyFeedbackConnectionEdge';\n  readonly node: ArticleReplyFeedback;\n  readonly cursor: Scalars['String'];\n  readonly score?: Maybe<Scalars['Float']>;\n  readonly highlight?: Maybe<Highlights>;\n};\n\nexport type ListArticleReplyFeedbackConnectionPageInfo = PageInfo & {\n  readonly __typename?: 'ListArticleReplyFeedbackConnectionPageInfo';\n  readonly lastCursor?: Maybe<Scalars['String']>;\n  readonly firstCursor?: Maybe<Scalars['String']>;\n};\n\nexport type ListArticleReplyFeedbackFilter = {\n  readonly userId?: Maybe<Scalars['String']>;\n  readonly appId?: Maybe<Scalars['String']>;\n  readonly articleId?: Maybe<Scalars['String']>;\n  readonly replyId?: Maybe<Scalars['String']>;\n  /** Search for comment field using more_like_this query */\n  readonly moreLikeThis?: Maybe<MoreLikeThisInput>;\n  /** When specified, list only article reply feedbacks with specified vote */\n  readonly vote?: Maybe<ReadonlyArray<Maybe<FeedbackVote>>>;\n  /** List only the article reply feedbacks that were created within the specific time range. */\n  readonly createdAt?: Maybe<TimeRangeInput>;\n  /** List only the article reply feedbacks that were last updated within the specific time range. */\n  readonly updatedAt?: Maybe<TimeRangeInput>;\n};\n\n/** An entry of orderBy argument. Specifies field name and the sort order. Only one field name is allowd per entry. */\nexport type ListArticleReplyFeedbackOrderBy = {\n  readonly createdAt?: Maybe<SortOrderEnum>;\n  readonly updatedAt?: Maybe<SortOrderEnum>;\n  readonly vote?: Maybe<SortOrderEnum>;\n  /** Full text relevance for comment field queries */\n  readonly _score?: Maybe<SortOrderEnum>;\n};\n\nexport type Mutation = {\n  readonly __typename?: 'Mutation';\n  /** Create an article and/or a replyRequest */\n  readonly CreateArticle?: Maybe<MutationResult>;\n  /** Create a reply that replies to the specified article. */\n  readonly CreateReply?: Maybe<MutationResult>;\n  /** Connects specified reply and specified article. */\n  readonly CreateArticleReply?: Maybe<ReadonlyArray<Maybe<ArticleReply>>>;\n  /** Create a category */\n  readonly CreateCategory?: Maybe<MutationResult>;\n  /** Adds specified category to specified article. */\n  readonly CreateArticleCategory?: Maybe<ReadonlyArray<Maybe<ArticleCategory>>>;\n  /**\n   * Create or update a reply request for the given article\n   * @deprecated Use CreateOrUpdateReplyRequest instead\n   */\n  readonly CreateReplyRequest?: Maybe<Article>;\n  /** Create or update a reply request for the given article */\n  readonly CreateOrUpdateReplyRequest?: Maybe<Article>;\n  /** Create or update a feedback on an article-reply connection */\n  readonly CreateOrUpdateArticleReplyFeedback?: Maybe<ArticleReply>;\n  /** Create or update a feedback on an article-category connection */\n  readonly CreateOrUpdateArticleCategoryFeedback?: Maybe<ArticleCategory>;\n  /** Create or update a feedback on a reply request reason */\n  readonly CreateOrUpdateReplyRequestFeedback?: Maybe<ReplyRequest>;\n  /** Change status of specified articleReplies */\n  readonly UpdateArticleReplyStatus?: Maybe<ReadonlyArray<Maybe<ArticleReply>>>;\n  /** Change status of specified articleCategory */\n  readonly UpdateArticleCategoryStatus?: Maybe<ReadonlyArray<Maybe<ArticleCategory>>>;\n  /** Change attribute of a user */\n  readonly UpdateUser?: Maybe<User>;\n};\n\n\nexport type MutationCreateArticleArgs = {\n  text: Scalars['String'];\n  reference: ArticleReferenceInput;\n  reason?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationCreateReplyArgs = {\n  articleId: Scalars['String'];\n  text: Scalars['String'];\n  type: ReplyTypeEnum;\n  reference?: Maybe<Scalars['String']>;\n  waitForHyperlinks?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type MutationCreateArticleReplyArgs = {\n  articleId: Scalars['String'];\n  replyId: Scalars['String'];\n};\n\n\nexport type MutationCreateCategoryArgs = {\n  title: Scalars['String'];\n  description: Scalars['String'];\n};\n\n\nexport type MutationCreateArticleCategoryArgs = {\n  articleId: Scalars['String'];\n  categoryId: Scalars['String'];\n  aiModel?: Maybe<Scalars['String']>;\n  aiConfidence?: Maybe<Scalars['Float']>;\n};\n\n\nexport type MutationCreateReplyRequestArgs = {\n  articleId: Scalars['String'];\n  reason?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationCreateOrUpdateReplyRequestArgs = {\n  articleId: Scalars['String'];\n  reason?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationCreateOrUpdateArticleReplyFeedbackArgs = {\n  articleId: Scalars['String'];\n  replyId: Scalars['String'];\n  vote: FeedbackVote;\n  comment?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationCreateOrUpdateArticleCategoryFeedbackArgs = {\n  articleId: Scalars['String'];\n  categoryId: Scalars['String'];\n  vote: FeedbackVote;\n  comment?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationCreateOrUpdateReplyRequestFeedbackArgs = {\n  replyRequestId: Scalars['String'];\n  vote: FeedbackVote;\n};\n\n\nexport type MutationUpdateArticleReplyStatusArgs = {\n  articleId: Scalars['String'];\n  replyId: Scalars['String'];\n  status: ArticleReplyStatusEnum;\n};\n\n\nexport type MutationUpdateArticleCategoryStatusArgs = {\n  articleId: Scalars['String'];\n  categoryId: Scalars['String'];\n  status: ArticleCategoryStatusEnum;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  name: Scalars['String'];\n};\n\nexport type MutationResult = {\n  readonly __typename?: 'MutationResult';\n  readonly id?: Maybe<Scalars['String']>;\n};\n\nexport type ArticleReferenceInput = {\n  readonly type: ArticleReferenceTypeEnum;\n  readonly permalink?: Maybe<Scalars['String']>;\n};\n\nexport type LoadApiStatsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LoadApiStatsQuery = (\n  { readonly __typename?: 'Query' }\n  & { readonly allArticles?: Maybe<(\n    { readonly __typename?: 'ArticleConnection' }\n    & Pick<ArticleConnection, 'totalCount'>\n  )>, readonly allRepliedArticles?: Maybe<(\n    { readonly __typename?: 'ArticleConnection' }\n    & Pick<ArticleConnection, 'totalCount'>\n  )>, readonly articlesHasUsefulReplies?: Maybe<(\n    { readonly __typename?: 'ArticleConnection' }\n    & Pick<ArticleConnection, 'totalCount'>\n  )> }\n);\n\nexport type BigNumOfRepliedQueryVariables = Exact<{\n  startTime?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type BigNumOfRepliedQuery = (\n  { readonly __typename?: 'Query' }\n  & { readonly query?: Maybe<(\n    { readonly __typename?: 'ArticleConnection' }\n    & Pick<ArticleConnection, 'totalCount'>\n  )> }\n);\n\nexport type BigNumOfFeedbacksQueryVariables = Exact<{\n  startTime?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type BigNumOfFeedbacksQuery = (\n  { readonly __typename?: 'Query' }\n  & { readonly query?: Maybe<(\n    { readonly __typename?: 'ListArticleReplyFeedbackConnection' }\n    & Pick<ListArticleReplyFeedbackConnection, 'totalCount'>\n  )> }\n);\n\nexport type ListRepliesQueryVariables = Exact<{\n  before?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type ListRepliesQuery = (\n  { readonly __typename?: 'Query' }\n  & { readonly ListReplies?: Maybe<(\n    { readonly __typename?: 'ReplyConnection' }\n    & Pick<ReplyConnection, 'totalCount'>\n    & { readonly pageInfo: (\n      { readonly __typename?: 'ReplyConnectionPageInfo' }\n      & Pick<ReplyConnectionPageInfo, 'firstCursor' | 'lastCursor'>\n    ), readonly edges: ReadonlyArray<(\n      { readonly __typename?: 'ReplyConnectionEdge' }\n      & Pick<ReplyConnectionEdge, 'cursor'>\n      & { readonly node: (\n        { readonly __typename?: 'Reply' }\n        & Pick<Reply, 'id' | 'text' | 'createdAt'>\n        & { readonly user?: Maybe<(\n          { readonly __typename?: 'User' }\n          & Pick<User, 'name'>\n        )> }\n      ) }\n    )> }\n  )> }\n);\n\n\nexport const LoadApiStatsDocument = gql`\n    query LoadAPIStats {\n  allArticles: ListArticles {\n    totalCount\n  }\n  allRepliedArticles: ListArticles(filter: {replyCount: {GTE: 1}}) {\n    totalCount\n  }\n  articlesHasUsefulReplies: ListArticles(filter: {hasArticleReplyWithMorePositiveFeedback: true}) {\n    totalCount\n  }\n}\n    `;\n\n/**\n * __useLoadApiStatsQuery__\n *\n * To run a query within a React component, call `useLoadApiStatsQuery` and pass it any options that fit your needs.\n * When your component renders, `useLoadApiStatsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLoadApiStatsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useLoadApiStatsQuery(baseOptions?: Apollo.QueryHookOptions<LoadApiStatsQuery, LoadApiStatsQueryVariables>) {\n        return Apollo.useQuery<LoadApiStatsQuery, LoadApiStatsQueryVariables>(LoadApiStatsDocument, baseOptions);\n      }\nexport function useLoadApiStatsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LoadApiStatsQuery, LoadApiStatsQueryVariables>) {\n          return Apollo.useLazyQuery<LoadApiStatsQuery, LoadApiStatsQueryVariables>(LoadApiStatsDocument, baseOptions);\n        }\nexport type LoadApiStatsQueryHookResult = ReturnType<typeof useLoadApiStatsQuery>;\nexport type LoadApiStatsLazyQueryHookResult = ReturnType<typeof useLoadApiStatsLazyQuery>;\nexport type LoadApiStatsQueryResult = Apollo.QueryResult<LoadApiStatsQuery, LoadApiStatsQueryVariables>;\nexport const BigNumOfRepliedDocument = gql`\n    query BigNumOfReplied($startTime: String) {\n  query: ListArticles(filter: {repliedAt: {GTE: $startTime}}) {\n    totalCount\n  }\n}\n    `;\n\n/**\n * __useBigNumOfRepliedQuery__\n *\n * To run a query within a React component, call `useBigNumOfRepliedQuery` and pass it any options that fit your needs.\n * When your component renders, `useBigNumOfRepliedQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBigNumOfRepliedQuery({\n *   variables: {\n *      startTime: // value for 'startTime'\n *   },\n * });\n */\nexport function useBigNumOfRepliedQuery(baseOptions?: Apollo.QueryHookOptions<BigNumOfRepliedQuery, BigNumOfRepliedQueryVariables>) {\n        return Apollo.useQuery<BigNumOfRepliedQuery, BigNumOfRepliedQueryVariables>(BigNumOfRepliedDocument, baseOptions);\n      }\nexport function useBigNumOfRepliedLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BigNumOfRepliedQuery, BigNumOfRepliedQueryVariables>) {\n          return Apollo.useLazyQuery<BigNumOfRepliedQuery, BigNumOfRepliedQueryVariables>(BigNumOfRepliedDocument, baseOptions);\n        }\nexport type BigNumOfRepliedQueryHookResult = ReturnType<typeof useBigNumOfRepliedQuery>;\nexport type BigNumOfRepliedLazyQueryHookResult = ReturnType<typeof useBigNumOfRepliedLazyQuery>;\nexport type BigNumOfRepliedQueryResult = Apollo.QueryResult<BigNumOfRepliedQuery, BigNumOfRepliedQueryVariables>;\nexport const BigNumOfFeedbacksDocument = gql`\n    query BigNumOfFeedbacks($startTime: String) {\n  query: ListArticleReplyFeedbacks(filter: {createdAt: {GTE: $startTime}}) {\n    totalCount\n  }\n}\n    `;\n\n/**\n * __useBigNumOfFeedbacksQuery__\n *\n * To run a query within a React component, call `useBigNumOfFeedbacksQuery` and pass it any options that fit your needs.\n * When your component renders, `useBigNumOfFeedbacksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBigNumOfFeedbacksQuery({\n *   variables: {\n *      startTime: // value for 'startTime'\n *   },\n * });\n */\nexport function useBigNumOfFeedbacksQuery(baseOptions?: Apollo.QueryHookOptions<BigNumOfFeedbacksQuery, BigNumOfFeedbacksQueryVariables>) {\n        return Apollo.useQuery<BigNumOfFeedbacksQuery, BigNumOfFeedbacksQueryVariables>(BigNumOfFeedbacksDocument, baseOptions);\n      }\nexport function useBigNumOfFeedbacksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BigNumOfFeedbacksQuery, BigNumOfFeedbacksQueryVariables>) {\n          return Apollo.useLazyQuery<BigNumOfFeedbacksQuery, BigNumOfFeedbacksQueryVariables>(BigNumOfFeedbacksDocument, baseOptions);\n        }\nexport type BigNumOfFeedbacksQueryHookResult = ReturnType<typeof useBigNumOfFeedbacksQuery>;\nexport type BigNumOfFeedbacksLazyQueryHookResult = ReturnType<typeof useBigNumOfFeedbacksLazyQuery>;\nexport type BigNumOfFeedbacksQueryResult = Apollo.QueryResult<BigNumOfFeedbacksQuery, BigNumOfFeedbacksQueryVariables>;\nexport const ListRepliesDocument = gql`\n    query ListReplies($before: String, $after: String) {\n  ListReplies(orderBy: [{createdAt: DESC}], before: $before, after: $after, first: 25) {\n    totalCount\n    pageInfo {\n      firstCursor\n      lastCursor\n    }\n    edges {\n      cursor\n      node {\n        id\n        text\n        user {\n          name\n        }\n        createdAt\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useListRepliesQuery__\n *\n * To run a query within a React component, call `useListRepliesQuery` and pass it any options that fit your needs.\n * When your component renders, `useListRepliesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useListRepliesQuery({\n *   variables: {\n *      before: // value for 'before'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useListRepliesQuery(baseOptions?: Apollo.QueryHookOptions<ListRepliesQuery, ListRepliesQueryVariables>) {\n        return Apollo.useQuery<ListRepliesQuery, ListRepliesQueryVariables>(ListRepliesDocument, baseOptions);\n      }\nexport function useListRepliesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ListRepliesQuery, ListRepliesQueryVariables>) {\n          return Apollo.useLazyQuery<ListRepliesQuery, ListRepliesQueryVariables>(ListRepliesDocument, baseOptions);\n        }\nexport type ListRepliesQueryHookResult = ReturnType<typeof useListRepliesQuery>;\nexport type ListRepliesLazyQueryHookResult = ReturnType<typeof useListRepliesLazyQuery>;\nexport type ListRepliesQueryResult = Apollo.QueryResult<ListRepliesQuery, ListRepliesQueryVariables>;","import { ApolloClient, ApolloLink, InMemoryCache } from '@apollo/client';\nimport { BatchHttpLink } from '@apollo/client/link/batch-http';\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    new BatchHttpLink({\n      uri: `${process.env.REACT_APP_API_URL}/graphql`,\n      headers: {\n        'x-app-id': 'RUMORS_SITE',\n      },\n    }),\n  ]),\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport red from '@material-ui/core/colors/red';\n\n// Create a theme instance.\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#ffb600',\n      50: '#fff890',\n      100: '#fff000',\n      200: '#ffe200',\n      300: '#ffd300',\n      400: '#ffc500',\n      500: '#ffb600',\n      600: '#ffa300',\n      700: '#ff9200',\n      800: '#ff7f00',\n      900: '#ff6d00',\n      light: '#fafafa',\n      dark: '#e8e8e8',\n    },\n    secondary: {\n      main: '#333333',\n      50: '#f5f5f5',\n      100: '#d6d6d6',\n      200: '#adadad',\n      300: '#858585',\n      400: '#5c5c5c',\n      500: '#333333',\n      600: '#2e2e2e',\n      700: '#292929',\n      800: '#242424',\n      900: '#1f1f1f',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#f5f5f5',\n    },\n  },\n  typography: {\n    fontFamily: '\"Noto Sans TC\", \"Helvetica\", \"Arial\", sans-serif',\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport { Link, LinkProps } from 'react-router-dom';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst useStyles = makeStyles({\n  link: {\n    textDecoration: 'none',\n  },\n});\n\ntype FunctionButtonProps = {\n  to: LinkProps['to'];\n  title: string;\n  description: string;\n};\n\nconst FunctionButton: React.FC<FunctionButtonProps> = ({\n  to,\n  title,\n  description,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Grid item xs={12} sm={6}>\n      <Link className={classes.link} to={to}>\n        <Card>\n          <CardActionArea>\n            <CardContent>\n              <Typography variant=\"h5\" gutterBottom>\n                {title}\n              </Typography>\n              <Typography variant=\"body1\">{description}</Typography>\n            </CardContent>\n          </CardActionArea>\n        </Card>\n      </Link>\n    </Grid>\n  );\n};\n\nconst Home: React.FC = () => {\n  return (\n    <Grid container spacing={2}>\n      <FunctionButton\n        to=\"/stats\"\n        title=\"Statistics\"\n        description=\"Real-time statistics from Cofacts API\"\n      />\n      <FunctionButton\n        to=\"/need-to-check/setup\"\n        title=\"Message to check\"\n        description=\"View list of messages that needs to be checked by editors\"\n      />\n      <FunctionButton\n        to=\"/editorworks\"\n        title=\"Thank you editors\"\n        description=\"List of recent works from editors\"\n      />\n      <FunctionButton\n        to=\"/bignum/setup\"\n        title=\"Big Numbers\"\n        description=\"Instant number display to project in meetups\"\n      />\n    </Grid>\n  );\n};\n\nexport default Home;\n","/**\n * Converts 1234 to \"1,234\"\n *\n * @param num The number to convert\n */\nexport function getThousandSep(num: number): string {\n  return num.toString().replace(/(\\d{1,3})(?=(\\d{3})+$)/, '$1,');\n}\n\n/**\n * @param enum\n * @returns type guard of the enum\n */\nexport function isSomeEnum<T>(e: T) {\n  return (token: any): token is T[keyof T] =>\n    Object.values(e).includes(token as T[keyof T]);\n}\n","/* eslint-disable */\n// @ts-nocheck\n\nimport React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nconst BATCH_SIZE = 25;\n\nexport enum SortOrder {\n  desc = 'desc',\n  asc = 'asc',\n}\n\ntype Setup = {\n  notRepliedCount: number;\n  notRepliedSortBy: string;\n  notRepliedSortOrder: SortOrder;\n  noUsefulCount: number;\n  noUsefulSortBy: string;\n  noUsefulSortOrder: SortOrder;\n};\n\nconst NeedToCheck: React.FC = () => {\n  const { search } = useLocation();\n  const searchParams = new URLSearchParams(search);\n  const notRepliedCount = +searchParams.get(\n    'notRepliedCount'\n  ) as Setup['notRepliedCount'];\n  const notRepliedSortBy = searchParams.get(\n    'notRepliedSortBy'\n  ) as Setup['notRepliedSortBy'];\n  const notRepliedSortOrder = searchParams.get(\n    'notRepliedSortOrder'\n  ) as Setup['notRepliedSortOrder'];\n  const noUsefulCount = +searchParams.get(\n    'noUsefulCount'\n  ) as Setup['noUsefulCount'];\n  const noUsefulSortBy = searchParams.get(\n    'noUsefulSortBy'\n  ) as Setup['noUsefulSortBy'];\n  const noUsefulSortOrder = searchParams.get(\n    'noUsefulSortOrder'\n  ) as Setup['noUsefulSortOrder'];\n\n  return <div>Need-to-check table</div>;\n};\n\nexport default NeedToCheck;\n","import React from 'react';\nimport { useLoadApiStatsQuery } from '../types';\nimport { getThousandSep } from '../lib/util';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst POLLING_INTERVAL = 5000;\n\ntype StatItemProps = {\n  name: string;\n  value: string;\n};\n\nconst StatItem: React.FC<StatItemProps> = ({ name, value }) => {\n  return (\n    <Grid item xs={12} sm={4}>\n      <Card>\n        <CardContent>\n          <Typography variant=\"body1\" gutterBottom>\n            {name}\n          </Typography>\n          <Typography variant=\"h5\">{value}</Typography>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nconst APIStats: React.FC = () => {\n  const { data, loading } = useLoadApiStatsQuery({\n    pollInterval: POLLING_INTERVAL,\n  });\n\n  if (loading) {\n    return (\n      <Typography align=\"center\" component=\"div\">\n        <CircularProgress size={64} />\n      </Typography>\n    );\n  }\n\n  return (\n    <Grid container spacing={2}>\n      <StatItem\n        name=\"All messages\"\n        value={getThousandSep(data?.allArticles?.totalCount || 0)}\n      />\n      <StatItem\n        name=\"Replied messages\"\n        value={getThousandSep(data?.allRepliedArticles?.totalCount || 0)}\n      />\n      <StatItem\n        name=\"Has useful replies\"\n        value={getThousandSep(data?.articlesHasUsefulReplies?.totalCount || 0)}\n      />\n    </Grid>\n  );\n};\n\nexport default APIStats;\n","import React from 'react';\n\nconst NeedToCheckSetup: React.FC = () => {\n  return <div>Need-to-check form</div>;\n};\n\nexport default NeedToCheckSetup;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport {\n  useListRepliesQuery,\n  ListRepliesQuery,\n  ReplyConnectionPageInfo,\n} from '../types';\nimport { stringify } from 'querystring';\n\nfunction Pagination({\n  pageInfo = {},\n  edges = [],\n}: {\n  pageInfo: ReplyConnectionPageInfo;\n  edges: NonNullable<ListRepliesQuery['ListReplies']>['edges'];\n}) {\n  const { firstCursor, lastCursor } = pageInfo;\n  if (!firstCursor || !lastCursor) {\n    return null;\n  }\n\n  const firstCursorOfPage = edges.length && edges[0] && edges[0].cursor;\n  const lastCursorOfPage =\n    edges.length && edges[edges.length - 1] && edges[edges.length - 1].cursor;\n\n  return (\n    <p>\n      {firstCursor && firstCursor !== firstCursorOfPage && (\n        <Link\n          to={{\n            pathname: '/editorworks',\n            search: stringify({ before: firstCursorOfPage, after: undefined }),\n          }}\n        >\n          Prev\n        </Link>\n      )}\n      {lastCursor && lastCursor !== lastCursorOfPage && (\n        <Link\n          to={{\n            pathname: '/editorworks',\n            search: stringify({ after: lastCursorOfPage, before: undefined }),\n          }}\n        >\n          Next\n        </Link>\n      )}\n    </p>\n  );\n}\n\nconst EditorWorks: React.FC = () => {\n  const { search } = useLocation();\n  const searchParams = new URLSearchParams(search);\n  const beforeParam = searchParams.get('before');\n  const afterParam = searchParams.get('after');\n  const { data, loading, error } = useListRepliesQuery({\n    variables: {\n      before: beforeParam,\n      after: afterParam,\n    },\n  });\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error: {error}</p>;\n  }\n\n  if (!data || !data.ListReplies || !data.ListReplies.edges) {\n    return <p>No data</p>;\n  }\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Text</th>\n          <th>Author</th>\n          <th>Created at</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.ListReplies.edges.map(({ node }) => (\n          <tr key={node.id}>\n            <td>\n              <a href={`https://cofacts.hacktabl.org/reply/${node.id}`}>\n                {node.text}\n              </a>\n            </td>\n            <td>{node?.user?.name}</td>\n            <td>\n              <a href={`https://cofacts.hacktabl.org/reply/${node.id}`}>\n                {node.createdAt}\n              </a>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n      <tfoot>\n        <tr>\n          <td colSpan={3}>\n            <Pagination\n              pageInfo={data.ListReplies.pageInfo}\n              edges={data.ListReplies.edges}\n            />\n          </td>\n        </tr>\n      </tfoot>\n    </table>\n  );\n};\n\nexport default EditorWorks;\n","type FunNumberSetup = {\n  top?: string;\n  bottom?: string;\n};\n\nconst FUN_NUMBERS: { [num: number]: FunNumberSetup } = {\n  7: {\n    top: 'Lucky',\n  },\n  17: {\n    bottom: '8+9',\n  },\n  21: {\n    top: '每天只有',\n    bottom: '小時，剩下 3 小時是用來睡覺的',\n  },\n  30: {\n    bottom: '而立',\n  },\n  38: {\n    bottom: '婦女節',\n  },\n  40: {\n    bottom: '不惑',\n  },\n  44: {\n    bottom: '隻石獅子',\n  },\n  50: {\n    bottom: '知天命',\n  },\n  56: {\n    bottom: '不能亡',\n  },\n  60: {\n    top: '在非洲每過了',\n    bottom: '秒，就有一分鐘過去',\n  },\n  64: {\n    top: '勿忘',\n  },\n  70: {\n    bottom: '隨心所欲而不踰矩',\n  },\n  77: {\n    top: '森',\n  },\n  87: {\n    bottom: '不能再高了',\n  },\n  92: {\n    top: '沒有共識的',\n    bottom: '共識',\n  },\n  94: {\n    bottom: '狂',\n  },\n  101: {\n    bottom: '大樓',\n  },\n  104: {\n    bottom: '查號台',\n  },\n  113: {\n    top: '衛福部',\n    bottom: '保護專線',\n  },\n  118: {\n    top: '看到',\n    bottom: '就跪了',\n  },\n  123: {\n    bottom: '木頭人',\n  },\n  128: {\n    top: '2的7次方',\n  },\n  144: {\n    top: '12×12=',\n  },\n  165: {\n    top: '警政署',\n    bottom: '反詐騙專線',\n  },\n  183: {\n    bottom: 'CLUB',\n  },\n  193: {\n    bottom: '縣道',\n  },\n  200: {\n    top: '意外撿到',\n    bottom: '元',\n  },\n  228: {\n    bottom: '二二八',\n  },\n  318: {\n    bottom: '學運',\n  },\n  377: {\n    bottom: '森七七',\n  },\n  500: {\n    top: '下去領',\n  },\n};\n\nexport default FUN_NUMBERS;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useQuery, gql } from '@apollo/client';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { isSomeEnum } from '../lib/util';\nimport FUN_NUMBERS from '../lib/funNumbers';\n\nconst MARGIN = 80;\nconst POLLING_INTERVAL = 5000;\n\nexport enum PanelType {\n  replied = 'replied',\n  feedback = 'feedback',\n}\n\n/**\n * Setup data for BigNum displays derived from <BigNumSetup>\n */\ntype Setup = {\n  /**\n   * Date to start counting\n   */\n  start: Date;\n\n  /**\n   * What panel(s) to display\n   */\n  panels: PanelType[];\n};\n\nconst PANELS_SETUP = {\n  [PanelType.replied]: {\n    top: '回覆了',\n    bottom: '則訊息',\n    query: gql`\n      query BigNumOfReplied($startTime: String) {\n        query: ListArticles(filter: { repliedAt: { GTE: $startTime } }) {\n          totalCount\n        }\n      }\n    `,\n  },\n  [PanelType.feedback]: {\n    top: '新增了',\n    bottom: '則評價',\n    query: gql`\n      query BigNumOfFeedbacks($startTime: String) {\n        query: ListArticleReplyFeedbacks(\n          filter: { createdAt: { GTE: $startTime } }\n        ) {\n          totalCount\n        }\n      }\n    `,\n  },\n} as const;\n\nconst DISPLAY_SIZE = 768;\n\nconst useStyles = makeStyles({\n  displays: {\n    position: 'fixed',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    display: 'flex',\n    background: '#fff',\n  },\n  resizer: {\n    flex: 1,\n    position: 'relative', // contains resized display & the border\n  },\n  display: {\n    position: 'absolute',\n    width: DISPLAY_SIZE,\n    height: DISPLAY_SIZE,\n    left: '50%',\n    top: '50%',\n    display: 'flex',\n    flexFlow: 'column',\n    justifyContent: 'space-around',\n    textAlign: 'center',\n    '& > p': {\n      margin: 0,\n    },\n  },\n  time: {\n    fontSize: 36,\n    fontWeight: 200,\n  },\n  top: {\n    fontSize: 64,\n    fontWeight: 600,\n  },\n  bottom: {\n    fontSize: 44,\n    fontWeight: 600,\n  },\n  number: {\n    fontSize: 360,\n    lineHeight: 1,\n    fontWeight: 400,\n  },\n  funNumber: {\n    fontSize: 360,\n    fontWeight: 100,\n  },\n  funParagraph: {\n    fontSize: 84,\n    fontWeight: 600,\n  },\n  border: {\n    position: 'absolute',\n    border: '8px solid rgba(0,0,0,0.64)',\n    top: 24,\n    right: 24,\n    bottom: 24,\n    left: 24,\n  },\n});\n\ntype BigNumDisplayProps = {\n  rootProps: JSX.IntrinsicElements['div'];\n  start: Setup['start'];\n  panelType: PanelType;\n};\n\nconst BigNumDisplay: React.FC<BigNumDisplayProps> = ({\n  rootProps,\n  start,\n  panelType,\n}) => {\n  const classes = useStyles();\n  const { top, bottom, query } = PANELS_SETUP[panelType];\n\n  const { data, loading, error } = useQuery(query, {\n    pollInterval: POLLING_INTERVAL,\n    variables: { startTime: start.toISOString() },\n  });\n\n  if (loading) {\n    return <div {...rootProps}>Loading</div>;\n  }\n\n  if (error) {\n    return <div {...rootProps}>{error.toString()}</div>;\n  }\n\n  const number = data.query?.totalCount as number | null;\n  const numberStr = number === null ? '' : number.toString();\n\n  if (number && number in FUN_NUMBERS) {\n    const { top, bottom } = FUN_NUMBERS[number];\n    return (\n      <>\n        <div {...rootProps}>\n          {top && <p className={classes.funParagraph}>{top}</p>}\n          <p className={classes.funNumber}>{numberStr}</p>\n          {bottom && <p className={classes.funParagraph}>{bottom}</p>}\n        </div>\n        <div className={classes.border} />\n      </>\n    );\n  }\n\n  return (\n    <div {...rootProps}>\n      <p className={classes.time}>自 {start.toLocaleString()} 起</p>\n      <p className={classes.top}>{top}</p>\n      <p className={classes.number}>{numberStr}</p>\n      <p className={classes.bottom}>{bottom}</p>\n    </div>\n  );\n};\n\ntype ResizerProp = {\n  children: (props: JSX.IntrinsicElements['div']) => JSX.Element;\n};\n\nconst Resizer: React.FC<ResizerProp> = ({ children }) => {\n  const classes = useStyles();\n  const [scale, setScale] = useState(1);\n  const resizerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    function resize() {\n      if (resizerRef.current === null) return;\n      const { width, height } = resizerRef.current.getBoundingClientRect();\n      const horizontalScale = Math.max(width - MARGIN, 0) / DISPLAY_SIZE;\n      const verticalScale = Math.max(height - MARGIN, 0) / DISPLAY_SIZE;\n\n      setScale(Math.min(horizontalScale, verticalScale));\n    }\n    window.addEventListener('resize', resize);\n    resize();\n\n    return () => {\n      window.removeEventListener('resize', resize);\n    };\n  }, []);\n\n  return (\n    <div className={classes.resizer} ref={resizerRef}>\n      {children({\n        className: classes.display,\n        style: { transform: `translate(-50%, -50%) scale(${scale})` },\n      })}\n    </div>\n  );\n};\n\nconst BigNum: React.FC = () => {\n  const { search } = useLocation();\n  const classes = useStyles();\n\n  const searchParams = new URLSearchParams(search);\n  const startParam = searchParams.get('start');\n  const panelsParms = searchParams.getAll('panels');\n  const startDate = startParam ? new Date(startParam) : new Date();\n\n  const panels = panelsParms.map((param) => {\n    if (!isSomeEnum(PanelType)(param)) {\n      throw new Error('panels must be one of PanelType.');\n    }\n    return PanelType[param];\n  });\n\n  return (\n    <div className={classes.displays}>\n      {panels.map((panelType) => (\n        <Resizer key={panelType}>\n          {(props) => (\n            <BigNumDisplay\n              rootProps={props}\n              panelType={panelType}\n              start={startDate}\n            />\n          )}\n        </Resizer>\n      ))}\n    </div>\n  );\n};\n\nexport default BigNum;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport { PanelType } from './BigNum';\n\nconst useStyles = makeStyles((theme) => ({\n  setup: {\n    margin: `${theme.spacing(2)}px auto`,\n  },\n  panelsetup: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nconst BigNumSetup: React.FC = () => {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const query = new URLSearchParams(\n      // FIXME: bug in URLSearchParams type (https://github.com/Microsoft/TypeScript/issues/30584)\n      // @ts-ignore\n      new FormData(e.target)\n    ).toString();\n\n    history.push('/bignum?' + query);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Card classes={{ root: classes.setup }}>\n        <CardContent>\n          <Typography variant=\"h4\" gutterBottom>\n            Display settings\n          </Typography>\n          <TextField\n            name=\"start\"\n            label=\"Time to start counting\"\n            type=\"datetime-local\"\n            InputLabelProps={{ shrink: true }}\n          />\n          <FormLabel component=\"legend\" classes={{ root: classes.panelsetup }}>\n            Numbers to show\n          </FormLabel>\n          <FormGroup>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"panels\"\n                  value={PanelType.replied}\n                  defaultChecked\n                />\n              }\n              label=\"Replied articles\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"panels\"\n                  value={PanelType.feedback}\n                  defaultChecked\n                />\n              }\n              label=\"Feedbacks\"\n            />\n          </FormGroup>\n        </CardContent>\n        <CardActions>\n          <Button color=\"primary\" type=\"submit\">\n            Start\n          </Button>\n        </CardActions>\n      </Card>\n    </form>\n  );\n};\n\nexport default BigNumSetup;\n","import React from 'react';\nimport { Route, Switch, Link } from 'react-router-dom';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport Home from './pages/Home';\nimport APIStats from './pages/APIStats';\nimport NeedToCheckSetup from './pages/NeedToCheckSetup';\nimport NeedToCheck from './pages/NeedToCheck';\nimport EditorWorks from './pages/EditorWorks';\nimport BigNumSetup from './pages/BigNumSetup';\nimport BigNum from './pages/BigNum';\n\nconst useStyles = makeStyles((theme) => ({\n  titleLink: {\n    color: 'inherit',\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  },\n  gridContainer: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <AppBar color=\"secondary\" position=\"static\">\n        <Toolbar>\n          <Link to=\"/\" className={classes.titleLink}>\n            <Typography variant=\"h6\">Cofacts Community Builder</Typography>\n          </Link>\n        </Toolbar>\n      </AppBar>\n      <Container classes={{ root: classes.gridContainer }} maxWidth=\"lg\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/stats\">\n            <APIStats />\n          </Route>\n          <Route path=\"/need-to-check/setup\">\n            <NeedToCheckSetup />\n          </Route>\n          <Route path=\"/need-to-check\">\n            <NeedToCheck />\n          </Route>\n          <Route path=\"/editorworks\">\n            <EditorWorks />\n          </Route>\n          <Route path=\"/bignum/setup\">\n            <BigNumSetup />\n          </Route>\n          <Route path=\"/bignum\">\n            <BigNum />\n          </Route>\n        </Switch>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport { ApolloProvider } from '@apollo/client';\nimport { HashRouter as Router } from 'react-router-dom';\nimport client from './lib/apollo';\nimport theme from './lib/theme';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <ApolloProvider client={client}>\n        <Router>\n          <App />\n        </Router>\n      </ApolloProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}