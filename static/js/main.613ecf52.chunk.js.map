{"version":3,"sources":["lib/apollo.ts","lib/theme.ts","pages/Home.tsx","lib/util.ts","pages/APIStats.tsx","pages/EditorWorks.tsx","pages/BigNum.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["client","ApolloClient","uri","process","theme","createMuiTheme","palette","primary","main","50","100","200","300","400","500","600","700","800","900","light","dark","secondary","error","red","A400","background","default","typography","fontFamily","useStyles","makeStyles","link","textDecoration","FunctionButton","to","title","description","classes","Grid","item","xs","sm","className","Card","CardActionArea","CardContent","Typography","variant","gutterBottom","Home","container","spacing","getThousandSep","num","toString","replace","STATS_QUERY","gql","StatItem","name","value","APIStats","useQuery","pollInterval","data","loading","align","component","CircularProgress","size","allArticles","totalCount","allRepliedArticles","articlesHasUsefulReplies","EditorWorks","BigNum","titleLink","color","gridContainer","marginTop","App","AppBar","position","Toolbar","Container","root","maxWidth","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.613ecf52.chunk.js","sourcesContent":["import ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: `${process.env.REACT_APP_API_URL}/graphql`,\n});\n\nexport default client;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport red from '@material-ui/core/colors/red';\n\n// Create a theme instance.\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#ffb600',\n      50: '#fff890',\n      100: '#fff000',\n      200: '#ffe200',\n      300: '#ffd300',\n      400: '#ffc500',\n      500: '#ffb600',\n      600: '#ffa300',\n      700: '#ff9200',\n      800: '#ff7f00',\n      900: '#ff6d00',\n      light: '#fafafa',\n      dark: '#e8e8e8',\n    },\n    secondary: {\n      main: '#333333',\n      50: '#f5f5f5',\n      100: '#d6d6d6',\n      200: '#adadad',\n      300: '#858585',\n      400: '#5c5c5c',\n      500: '#333333',\n      600: '#2e2e2e',\n      700: '#292929',\n      800: '#242424',\n      900: '#1f1f1f',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#f5f5f5',\n    },\n  },\n  typography: {\n    fontFamily: '\"Noto Sans TC\", \"Helvetica\", \"Arial\", sans-serif',\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport { Link, LinkProps } from 'react-router-dom';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst useStyles = makeStyles({\n  link: {\n    textDecoration: 'none',\n  },\n});\n\ntype FunctionButtonProps = {\n  to: LinkProps['to'];\n  title: string;\n  description: string;\n};\n\nconst FunctionButton: React.FC<FunctionButtonProps> = ({\n  to,\n  title,\n  description,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Grid item xs={12} sm={6}>\n      <Link className={classes.link} to={to}>\n        <Card>\n          <CardActionArea>\n            <CardContent>\n              <Typography variant=\"h5\" gutterBottom>\n                {title}\n              </Typography>\n              <Typography variant=\"body1\">{description}</Typography>\n            </CardContent>\n          </CardActionArea>\n        </Card>\n      </Link>\n    </Grid>\n  );\n};\n\nconst Home: React.FC = () => {\n  return (\n    <Grid container spacing={2}>\n      <FunctionButton\n        to=\"/stats\"\n        title=\"Statistics\"\n        description=\"Real-time statistics from Cofacts API\"\n      />\n      <FunctionButton\n        to=\"/editorworks\"\n        title=\"Thank you editors\"\n        description=\"List of recent works from editors\"\n      />\n      <FunctionButton\n        to=\"/bignum\"\n        title=\"Big Numbers\"\n        description=\"Instant number display to project in meetups\"\n      />\n    </Grid>\n  );\n};\n\nexport default Home;\n","/**\n * Converts 1234 to \"1,234\"\n *\n * @param num The number to convert\n */\nexport function getThousandSep(num: number): string {\n  return num.toString().replace(/(\\d{1,3})(?=(\\d{3})+$)/, '$1,');\n}\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { getThousandSep } from '../lib/util';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst POLLING_INTERVAL = 5000;\n\nconst STATS_QUERY = gql`\n  query LOAD_API_STATS {\n    allArticles: ListArticles {\n      totalCount\n    }\n    allRepliedArticles: ListArticles(filter: { replyCount: { GTE: 1 } }) {\n      totalCount\n    }\n    articlesHasUsefulReplies: ListArticles(\n      filter: { hasArticleReplyWithMorePositiveFeedback: true }\n    ) {\n      totalCount\n    }\n  }\n`;\n\ntype StatItemProps = {\n  name: string;\n  value: string;\n};\n\nconst StatItem: React.FC<StatItemProps> = ({ name, value }) => {\n  return (\n    <Grid item xs={12} sm={4}>\n      <Card>\n        <CardContent>\n          <Typography variant=\"body1\" gutterBottom>\n            {name}\n          </Typography>\n          <Typography variant=\"h5\">{value}</Typography>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nconst APIStats: React.FC = () => {\n  const { data, loading } = useQuery(STATS_QUERY, {\n    pollInterval: POLLING_INTERVAL,\n  });\n\n  if (loading) {\n    return (\n      <Typography align=\"center\" component=\"div\">\n        <CircularProgress size={64} />\n      </Typography>\n    );\n  }\n\n  return (\n    <Grid container spacing={2}>\n      <StatItem\n        name=\"All messages\"\n        value={getThousandSep(+data?.allArticles?.totalCount)}\n      />\n      <StatItem\n        name=\"Replied messages\"\n        value={getThousandSep(+data?.allRepliedArticles?.totalCount)}\n      />\n      <StatItem\n        name=\"Has useful replies\"\n        value={getThousandSep(+data?.articlesHasUsefulReplies?.totalCount)}\n      />\n    </Grid>\n  );\n};\n\nexport default APIStats;\n","import React from 'react';\n\nconst EditorWorks: React.FC = () => {\n  return <div>Thanks editor</div>;\n};\n\nexport default EditorWorks;\n","import React from 'react';\n\nconst BigNum: React.FC = () => {\n  return <div>Instant</div>;\n};\n\nexport default BigNum;\n","import React from 'react';\nimport { Route, Switch, Link } from 'react-router-dom';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport Home from './pages/Home';\nimport APIStats from './pages/APIStats';\nimport EditorWorks from './pages/EditorWorks';\nimport BigNum from './pages/BigNum';\n\nconst useStyles = makeStyles((theme) => ({\n  titleLink: {\n    color: 'inherit',\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  },\n  gridContainer: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <AppBar color=\"secondary\" position=\"static\">\n        <Toolbar>\n          <Link to=\"/\" className={classes.titleLink}>\n            <Typography variant=\"h6\">Cofacts Community Builder</Typography>\n          </Link>\n        </Toolbar>\n      </AppBar>\n      <Container classes={{ root: classes.gridContainer }} maxWidth=\"lg\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/stats\">\n            <APIStats />\n          </Route>\n          <Route path=\"/editorworks\">\n            <EditorWorks />\n          </Route>\n          <Route path=\"/bignum\">\n            <BigNum />\n          </Route>\n        </Switch>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { HashRouter as Router } from 'react-router-dom';\nimport client from './lib/apollo';\nimport theme from './lib/theme';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <ApolloProvider client={client}>\n        <Router>\n          <App />\n        </Router>\n      </ApolloProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}